apiVersion: apps/v1
kind: Deployment
metadata:
  name: image-scanner
  namespace: default
  labels:
    app: image-scanner
spec:
  replicas: 1
  selector:
    matchLabels:
      app: image-scanner
  template:
    metadata:
      labels:
        app: image-scanner
    spec:
      serviceAccountName: image-scanner
      containers:
      - name: scanner
        image: python:3.12.4-slim
        command: ["/bin/bash"]
        args:
        - -c
        - |
          echo "üöÄ Starting Kubernetes Image Scanner..."

          echo "üì¶ Installing prerequisites..."
          apt-get update
          apt-get install -y python3 python3-pip curl wget ca-certificates
          
          # Install Trivy directly from GitHub releases
          echo "üì¶ Installing Trivy from GitHub..."
          TRIVY_VERSION="0.63.0"
          wget -q "https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz" -O /tmp/trivy.tar.gz
          cd /tmp
          tar zxf trivy.tar.gz
          mv trivy /usr/local/bin/
          chmod +x /usr/local/bin/trivy
          rm /tmp/trivy.tar.gz
          echo "‚úÖ Trivy installed successfully"
          
          # Test Trivy installation
          trivy --version

          # Setup ACR authentication without Docker
          echo "üîê Setting up ACR authentication (Docker-free)..."

          export CLIENT_ID="your-service-principal-client-id"
          export CLIENT_SECRET="your-service-principal-client-secret"  
          export TENANT_ID="your-azure-tenant-id"
          export ACR_REGISTRY_NAME="azops"  # or your registry name
          
          echo "‚úÖ Trivy ACR authentication configured"
 
          # Create templates directory in writable location and copy HTML files
          echo "üìÅ Setting up templates..."
          mkdir -p /tmp/app/templates
          cp /app/*.py /tmp/app/
          cp /app/requirements.txt /tmp/app/
          cp /app/index.html /tmp/app/templates/
          cp /app/results.html /tmp/app/templates/
          cp /app/scan.html /tmp/app/templates/
          cp /app/all_results.html /tmp/app/templates/
          cd /tmp/app
          echo "‚úÖ Templates copied successfully to /tmp/app"
          
          # Upgrade pip first
          echo "üì¶ Upgrading pip..."
          pip install --upgrade pip
          
          # Install dependencies
          echo "üì¶ Installing dependencies..."
          pip install --no-cache-dir -r /tmp/app/requirements.txt
          echo "‚úÖ Dependencies installed"
          
          # Test Kubernetes connectivity
          echo "üîç Testing Kubernetes connectivity..."
          python -c "
          from kubernetes import client, config
          try:
              config.load_incluster_config()
              v1 = client.CoreV1Api()
              namespaces = v1.list_namespace()
              print(f'‚úÖ Successfully connected to Kubernetes. Found {len(namespaces.items)} namespaces')
          except Exception as e:
              print(f'‚ùå Kubernetes connection failed: {e}')
              exit(1)
          "
          
          # Start the Flask application
          echo "üåê Starting Flask application..."
          python /tmp/app/scanner.py
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: CLIENT_ID
          value: "your-service-principal-client-id"
        - name: CLIENT_SECRET
          value: "your-service-principal-client-secret"
        - name: TENANT_ID
          value: "your-azure-tenant-id"
        - name: ACR_REGISTRY_NAME
          value: "azops"
        volumeMounts:
        - name: script-volume
          mountPath: /app
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: script-volume
        configMap:
          name: image-scanner-script
          defaultMode: 0755
      restartPolicy: Always

apiVersion: v1
kind: ConfigMap
metadata:
  name: image-scanner-script
  namespace: default
data:
  scanner.py: |
    #!/usr/bin/env python3
    import subprocess
    import json
    import threading
    import os
    import time
    import sys
    from datetime import datetime
    from kubernetes import client, config
    from flask import Flask, render_template_string, request, Response, redirect, url_for, jsonify

    app = Flask(__name__)

    # ACR Configuration - Set these as environment variables
    ACR_CLIENT_ID = os.getenv('AZURE_CLIENT_ID')
    ACR_CLIENT_SECRET = os.getenv('AZURE_CLIENT_SECRET')
    ACR_TENANT_ID = os.getenv('AZURE_TENANT_ID')
    ACR_REGISTRY_NAME = os.getenv('ACR_REGISTRY_NAME', 'azops')

    # Global variable to store ACR token
    acr_token = None
    token_expiry = None

    # Enhanced logging function
    def log_message(message, level="INFO"):
        """Enhanced logging with console output and timestamp"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        formatted_message = f"[{timestamp}] [{level}] {message}"
        print(formatted_message, flush=True)  # Force flush to ensure immediate output
        sys.stdout.flush()
        return formatted_message

    # Load Kubernetes config
    try:
        config.load_incluster_config()
        v1 = client.CoreV1Api()
        log_message("‚úÖ Successfully loaded Kubernetes in-cluster config")
    except Exception as e:
        log_message(f"‚ùå Failed to load Kubernetes config: {e}", "ERROR")
        try:
            config.load_kube_config()
            v1 = client.CoreV1Api()
            log_message("‚úÖ Successfully loaded Kubernetes config from file")
        except Exception as e2:
            log_message(f"‚ùå Failed to load any Kubernetes config: {e2}", "ERROR")
            exit(1)

    # Enhanced data structures
    scan_results_by_namespace = {}
    scan_logs_by_namespace = {}
    scan_metadata_by_namespace = {}
    is_scanning_by_namespace = {}

    def authenticate_with_acr():
        """Authenticate with Azure Container Registry and get access token"""
        global acr_token, token_expiry
        
        log_message("üîê Authenticating with Azure Container Registry...")
        
        if not all([ACR_CLIENT_ID, ACR_CLIENT_SECRET, ACR_TENANT_ID]):
            raise Exception("Missing required environment variables: CLIENT_ID, CLIENT_SECRET, TENANT_ID")
        
        try:
            log_message(f"üîë Logging in to Azure with service principal...")
            login_cmd = [
                "az", "login", "--service-principal",
                "--username", ACR_CLIENT_ID,
                "--password", ACR_CLIENT_SECRET,
                "--tenant", ACR_TENANT_ID
            ]
            
            login_result = subprocess.run(
                login_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                timeout=60
            )
            
            if login_result.returncode != 0:
                raise Exception(f"Azure login failed: {login_result.stderr}")
            
            log_message("‚úÖ Successfully logged in to Azure")
            
            log_message(f"üé´ Getting ACR access token for registry: {ACR_REGISTRY_NAME}")
            token_cmd = [
                "az", "acr", "login",
                "-n", ACR_REGISTRY_NAME,
                "--expose-token",
                "--output", "tsv",
                "--query", "accessToken"
            ]
            
            token_result = subprocess.run(
                token_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                timeout=60
            )
            
            if token_result.returncode != 0:
                raise Exception(f"ACR token retrieval failed: {token_result.stderr}")
            
            acr_token = token_result.stdout.strip()
            if not acr_token:
                raise Exception("Received empty ACR token")
            
            token_expiry = datetime.now().timestamp() + (2.5 * 3600)
            log_message("‚úÖ Successfully obtained ACR access token")
            return True
            
        except subprocess.TimeoutExpired:
            raise Exception("Authentication timeout - Azure CLI commands took too long")
        except Exception as e:
            log_message(f"‚ùå ACR authentication failed: {str(e)}", "ERROR")
            raise

    def is_acr_token_valid():
        """Check if the current ACR token is still valid"""
        global acr_token, token_expiry
        
        if not acr_token or not token_expiry:
            return False
        
        return datetime.now().timestamp() < (token_expiry - 300)

    def ensure_acr_authentication():
        """Ensure we have a valid ACR token, refresh if needed"""
        if not is_acr_token_valid():
            log_message("üîÑ ACR token expired or missing, refreshing...")
            authenticate_with_acr()

    def is_acr_image(image):
        """Check if an image is from Azure Container Registry"""
        return f"{ACR_REGISTRY_NAME}.azurecr.io" in image

    def get_all_images(namespace):
        """Get all unique images from a namespace with debug logging"""
        images = set()
        try:
            log_message(f"Attempting to list pods in namespace: {namespace}")
            pods = v1.list_namespaced_pod(namespace)
            log_message(f"Found {len(pods.items)} pods in namespace {namespace}")
            
            for pod in pods.items:
                log_message(f"Pod {pod.metadata.name} status: {pod.status.phase}")
                if pod.spec.containers:
                    for container in pod.spec.containers:
                        log_message(f"Container {container.name} image: {container.image}")
                        images.add(container.image)
                
                if pod.spec.init_containers:
                    for container in pod.spec.init_containers:
                        log_message(f"Init container {container.name} image: {container.image}")
                        images.add(container.image)
            
            log_message(f"Total unique images found: {list(images)}")
        except Exception as e:
            log_message(f"Error getting images from namespace {namespace}: {e}", "ERROR")
        return list(images)

    def get_vulnerability_stats(results):
        """Calculate vulnerability statistics"""
        stats = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0, 'UNKNOWN': 0}
        total_vulns = 0
        
        for result in results:
            for vuln in result.get('vulnerabilities', []):
                severity = vuln.get('severity', 'UNKNOWN')
                stats[severity] = stats.get(severity, 0) + 1
                total_vulns += 1
        
        return stats, total_vulns

    def scan_image_with_trivy(image):
        """Scan a single image with Trivy, handling ACR authentication"""
        log_message(f"üîç Scanning image: {image}")
        
        cmd = ["trivy", "image", "--quiet", "--format", "json"]
        
        if is_acr_image(image):
            ensure_acr_authentication()
            log_message(f"üîê Using ACR authentication for image: {image}")
            cmd.extend([
                "--username", "00000000-0000-0000-0000-000000000000",
                "--password", acr_token
            ])
        
        cmd.append(image)
        
        log_message(f"Running command: {' '.join(cmd[:7])}... [credentials hidden]")
        
        result = subprocess.run(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=300,
            check=False
        )
        
        return result

    def scan_worker(namespace):
        """Enhanced scan worker with comprehensive debugging and ACR support"""
        global scan_results_by_namespace, scan_logs_by_namespace, scan_metadata_by_namespace, is_scanning_by_namespace
        
        log_message(f"=== STARTING SCAN FOR NAMESPACE: {namespace} ===")
        
        # Initialize data structures
        scan_results_by_namespace[namespace] = []
        scan_logs_by_namespace[namespace] = []
        scan_metadata_by_namespace[namespace] = {
            'start_time': datetime.now().isoformat(),
            'end_time': None,
            'status': 'scanning',
            'total_images': 0,
            'scanned_images': 0,
            'failed_images': 0,
            'acr_images': 0
        }
        is_scanning_by_namespace[namespace] = True

        def add_log(level, message):
            """Add log entry to both console and scan logs"""
            log_message(message, level)  # Console logging
            scan_logs_by_namespace[namespace].append({
                'timestamp': datetime.now().isoformat(),
                'level': level,
                'message': message
            })

        try:
            # Authenticate with ACR at the start of scanning
            try:
                ensure_acr_authentication()
                add_log('INFO', 'üîê ACR authentication successful')
            except Exception as e:
                add_log('WARNING', f'‚ö†Ô∏è ACR authentication failed: {str(e)}. ACR images may fail to scan.')

            images = get_all_images(namespace)
            log_message(f"Images to scan: {images}")
            
            # Count ACR images
            acr_image_count = sum(1 for img in images if is_acr_image(img))
            scan_metadata_by_namespace[namespace]['total_images'] = len(images)
            scan_metadata_by_namespace[namespace]['acr_images'] = acr_image_count
            
            if not images:
                message = f"No images found in namespace {namespace}"
                add_log('WARNING', message)
                scan_metadata_by_namespace[namespace]['status'] = 'completed'
                return

            add_log('INFO', f"Found {len(images)} images to scan in namespace {namespace} ({acr_image_count} ACR images)")

            for i, image in enumerate(images, 1):
                log_msg = f"Scanning image {i}/{len(images)}: {image}"
                if is_acr_image(image):
                    log_msg += " üîê (ACR)"
                
                add_log('INFO', log_msg)
                
                try:
                    result = scan_image_with_trivy(image)
                    
                    log_message(f"Trivy return code: {result.returncode}")
                    log_message(f"Trivy stdout length: {len(result.stdout)}")
                    log_message(f"Trivy stderr: {result.stderr}")
                    
                    if result.returncode != 0:
                        error_msg = f"Trivy returned code {result.returncode} for {image}: {result.stderr}"
                        add_log('WARNING', error_msg)
                        scan_metadata_by_namespace[namespace]['failed_images'] += 1
                        continue
                    
                    if not result.stdout.strip():
                        add_log('WARNING', f"Empty scan result for {image}")
                        scan_metadata_by_namespace[namespace]['scanned_images'] += 1
                        continue
                    
                    try:
                        scan_json = json.loads(result.stdout)
                        log_message(f"Parsed JSON keys: {list(scan_json.keys())}")
                    except json.JSONDecodeError as e:
                        log_message(f"JSON decode error: {e}", "ERROR")
                        log_message(f"Raw output was: {result.stdout[:500]}...")
                        scan_metadata_by_namespace[namespace]['failed_images'] += 1
                        add_log('ERROR', f"‚ùå Invalid JSON response for {image}: {str(e)}")
                        continue
                    
                    image_vulnerabilities = []
                    
                    results_list = scan_json.get("Results", [])
                    if not results_list:
                        log_message(f"No 'Results' key found in JSON for {image}")
                        if "Vulnerabilities" in scan_json:
                            results_list = [scan_json]
                    
                    for target in results_list:
                        target_name = target.get('Target', 'Unknown')
                        log_message(f"Processing target: {target_name}")
                        vulns = target.get("Vulnerabilities", [])
                        log_message(f"Found {len(vulns) if vulns else 0} vulnerabilities in target {target_name}")
                        
                        if vulns:
                            for v in vulns:
                                vuln_data = {
                                    "id": v.get("VulnerabilityID", "N/A"),
                                    "pkg": v.get("PkgName", "N/A"),
                                    "installed": v.get("InstalledVersion", "N/A"),
                                    "fixed": v.get("FixedVersion", "N/A"),
                                    "severity": v.get("Severity", "UNKNOWN"),
                                    "title": v.get("Title", ""),
                                    "description": (v.get("Description", "")[:200] + "...") if len(v.get("Description", "")) > 200 else v.get("Description", ""),
                                    "cvss_score": v.get("CVSS", {}).get("nvd", {}).get("V3Score", 0) if isinstance(v.get("CVSS"), dict) else 0,
                                    "target": target_name
                                }
                                image_vulnerabilities.append(vuln_data)
                                log_message(f"Added vulnerability: {vuln_data['id']} - {vuln_data['severity']}")
                    
                    log_message(f"Total vulnerabilities for {image}: {len(image_vulnerabilities)}")
                    
                    result_data = {
                        "image": image,
                        "vulnerabilities": image_vulnerabilities,
                        "scan_time": datetime.now().isoformat(),
                        "status": "success",
                        "is_acr": is_acr_image(image)
                    }
                    scan_results_by_namespace[namespace].append(result_data)
                    log_message(f"Added result for {image} with {len(image_vulnerabilities)} vulnerabilities")
                    
                    scan_metadata_by_namespace[namespace]['scanned_images'] += 1
                    success_msg = f"‚úÖ Completed scanning {image} - Found {len(image_vulnerabilities)} vulnerabilities"
                    if is_acr_image(image):
                        success_msg += " üîê"
                    
                    add_log('SUCCESS', success_msg)
                    
                except subprocess.TimeoutExpired:
                    scan_metadata_by_namespace[namespace]['failed_images'] += 1
                    error_msg = f"‚ùå Timeout scanning {image} (exceeded 5 minutes)"
                    add_log('ERROR', error_msg)
                except Exception as e:
                    scan_metadata_by_namespace[namespace]['failed_images'] += 1
                    error_msg = f"‚ùå Unexpected error scanning {image}: {str(e)}"
                    add_log('ERROR', error_msg)
        
        except Exception as e:
            error_msg = f"‚ùå Unexpected error in scan worker: {str(e)}"
            add_log('ERROR', error_msg)
            scan_metadata_by_namespace[namespace]['status'] = 'failed'
        finally:
            scan_metadata_by_namespace[namespace]['end_time'] = datetime.now().isoformat()
            if scan_metadata_by_namespace[namespace]['status'] != 'failed':
                scan_metadata_by_namespace[namespace]['status'] = 'completed'
            is_scanning_by_namespace[namespace] = False
            
            metadata = scan_metadata_by_namespace[namespace]
            final_msg = f"üèÅ Scan completed! Images: {metadata['scanned_images']}/{metadata['total_images']}, Failed: {metadata['failed_images']}, ACR: {metadata['acr_images']}"
            add_log('INFO', final_msg)
            log_message(f"Final results count for {namespace}: {len(scan_results_by_namespace[namespace])}")

    # HTML Templates stored as strings
    INDEX_HTML = '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Trivy Security Scanner</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
        <style>
            body { 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                background: linear-gradient(135deg, #667eea, #764ba2); 
                color: #333; margin: 0; padding: 20px; min-height: 100vh;
            }
            .container { max-width: 1200px; margin: 0 auto; }
            .header { text-align: center; color: white; margin-bottom: 40px; }
            .header h1 { font-size: 3rem; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }
            .header p { font-size: 1.2rem; opacity: 0.9; }
            .scan-form { 
                background: white; padding: 30px; border-radius: 15px; margin-bottom: 40px; 
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            }
            .form-group { display: flex; gap: 15px; justify-content: center; align-items: center; flex-wrap: wrap; }
            .form-group input { 
                flex: 1; min-width: 300px; padding: 15px 20px; border: 2px solid #e0e0e0; 
                border-radius: 10px; font-size: 1.1rem; transition: all 0.3s ease;
            }
            .form-group input:focus { outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1); }
            .btn { 
                padding: 15px 30px; background: linear-gradient(45deg, #667eea, #764ba2); 
                color: white; border: none; border-radius: 10px; cursor: pointer; 
                font-size: 1.1rem; font-weight: 600; transition: all 0.3s ease;
                display: flex; align-items: center; gap: 10px;
            }
            .btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4); }
            .error { background: #fee; color: #c33; padding: 15px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #fcc; }
            
            /* Enhanced Filters Section */
            .filters-section {
                background: white; border-radius: 15px; padding: 25px; margin-bottom: 25px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2); display: none;
            }
            .filters-section.show { display: block; animation: slideIn 0.5s ease; }
            @keyframes slideIn { from { transform: translateY(-20px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
            .filters-header { display: flex; align-items: center; gap: 10px; margin-bottom: 20px; }
            .filters-header h3 { color: #333; font-size: 1.5rem; margin: 0; }
            .filter-grid { display: grid; grid-template-columns: repeat(auto-fit, minwidth(200px, 1fr)); gap: 15px; margin-bottom: 20px; }
            .filter-group { display: flex; flex-direction: column; gap: 8px; }
            .filter-label { font-weight: 600; color: #555; font-size: 0.9rem; text-transform: uppercase; }
            .filter-input, .filter-select {
                padding: 10px 12px; border: 2px solid #e0e0e0; border-radius: 8px;
                font-size: 0.95rem; transition: all 0.3s ease; background: white;
            }
            .filter-input:focus, .filter-select:focus {
                outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }
            .filter-actions { display: flex; gap: 10px; justify-content: flex-end; flex-wrap: wrap; }
            .filter-btn {
                padding: 8px 16px; border: none; border-radius: 6px; cursor: pointer; 
                font-size: 0.9rem; font-weight: 500; transition: all 0.3s ease;
                display: flex; align-items: center; gap: 8px;
            }
            .filter-btn-primary { background: #667eea; color: white; }
            .filter-btn-secondary { background: #6c757d; color: white; }
            .filter-btn:hover { transform: translateY(-1px); box-shadow: 0 3px 10px rgba(0,0,0,0.2); }
            .active-filters { display: flex; gap: 8px; flex-wrap: wrap; margin-top: 15px; }
            .filter-tag {
                background: #e9ecef; padding: 4px 10px; border-radius: 16px; font-size: 0.8rem;
                display: flex; align-items: center; gap: 5px; color: #495057;
            }
            .filter-tag .remove { cursor: pointer; color: #dc3545; font-weight: bold; margin-left: 5px; }
            .filter-tag .remove:hover { color: #c82333; }
            .results-summary {
                background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;
                display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 15px;
            }
            .summary-text { font-weight: 500; color: #495057; }
            .summary-count { background: #667eea; color: white; padding: 4px 12px; border-radius: 12px; font-size: 0.9rem; }

            .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
            .stat-card {
                background: white; padding: 25px; border-radius: 12px;
                box-shadow: 0 5px 20px rgba(0,0,0,0.1); text-align: center; transition: transform 0.3s ease;
            }
            .stat-card:hover { transform: translateY(-5px); }
            .stat-icon {
                width: 50px; height: 50px; border-radius: 50%; display: flex;
                align-items: center; justify-content: center; margin: 0 auto 15px;
                font-size: 1.2rem; color: white;
            }
            .stat-critical .stat-icon { background: #dc3545; }
            .stat-high .stat-icon { background: #fd7e14; }
            .stat-medium .stat-icon { background: #ffc107; }
            .stat-low .stat-icon { background: #28a745; }
            .stat-total .stat-icon { background: #6f42c1; }
            .stat-value { font-size: 2rem; font-weight: 700; margin-bottom: 5px; }
            .stat-label { color: #666; font-size: 0.95rem; text-transform: uppercase; font-weight: 600; }
            .results-section { display: grid; gap: 25px; }
            .image-card {
                background: white; border-radius: 12px; box-shadow: 0 5px 20px rgba(0,0,0,0.1);
                overflow: hidden; transition: transform 0.3s ease;
            }
            .image-card:hover { transform: translateY(-2px); }
            .image-card.hidden { display: none; }
            .image-header {
                background: linear-gradient(45deg, #667eea, #764ba2); color: white;
                padding: 20px; display: flex; justify-content: space-between;
                align-items: center; flex-wrap: wrap; gap: 15px;
            }
            .image-info h3 { font-size: 1.2rem; margin-bottom: 5px; word-break: break-all; }
            .image-info p { opacity: 0.9; font-size: 0.9rem; }
            .image-stats { display: flex; gap: 15px; }
            .image-stat {
                text-align: center; padding: 8px 12px; background: rgba(255,255,255,0.2);
                border-radius: 8px;
            }
            .image-stat-value { font-size: 1.1rem; font-weight: 700; }
            .image-stat-label { font-size: 0.7rem; text-transform: uppercase; }
            .vulnerabilities-table { overflow-x: auto; }
            .vuln-table { width: 100%; border-collapse: collapse; }
            .vuln-table th {
                background: #f8f9fa; padding: 15px; text-align: left; font-weight: 600;
                border-bottom: 2px solid #dee2e6; position: sticky; top: 0; z-index: 10;
            }
            .vuln-table td { padding: 12px 15px; border-bottom: 1px solid #dee2e6; vertical-align: top; }
            .vuln-table tr:hover { background: #f8f9fa; }
            .vuln-table tr.hidden { display: none; }
            .severity-badge {
                padding: 4px 8px; border-radius: 12px; font-size: 0.75rem;
                font-weight: 600; text-transform: uppercase; white-space: nowrap;
            }
            .severity-CRITICAL { background: #dc3545; color: white; }
            .severity-HIGH { background: #fd7e14; color: white; }
            .severity-MEDIUM { background: #ffc107; color: #212529; }
            .severity-LOW { background: #28a745; color: white; }
            .severity-UNKNOWN { background: #6c757d; color: white; }
            .vuln-id {
                font-family: monospace; background: #f8f9fa; padding: 2px 6px;
                border-radius: 4px; font-size: 0.85rem;
            }
            .package-info { font-family: monospace; font-size: 0.9rem; }
            .version-badge {
                background: #e9ecef; padding: 2px 6px; border-radius: 4px;
                font-size: 0.8rem; margin: 2px; display: inline-block;
            }
            .fixed-version { background: #d1ecf1; color: #0c5460; }
            .vuln-title { font-weight: 500; line-height: 1.3; }
            .no-results {
                background: white; border-radius: 12px; padding: 60px 40px;
                text-align: center; box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            }
            .no-results i { font-size: 4rem; color: #28a745; margin-bottom: 20px; }
            .no-results h3 { font-size: 1.5rem; margin-bottom: 10px; color: #333; }
            .no-results p { color: #666; font-size: 1.1rem; }
            .expand-btn {
                background: none; border: none; color: #007bff; cursor: pointer;
                font-size: 0.8rem; padding: 2px 5px;
            }
            .expand-btn:hover { text-decoration: underline; }
            .description-full {
                display: none; margin-top: 8px; font-size: 0.85rem;
                color: #666; line-height: 1.4;
            }
            .description-full.show { display: block; }
            @media (max-width: 768px) {
                .container { padding: 10px; }
                .header { flex-direction: column; text-align: center; }
                .filter-grid { grid-template-columns: 1fr; }
                .filter-actions { flex-direction: column; }
                .stats-grid { grid-template-columns: repeat(2, 1fr); }
                .image-header { flex-direction: column; text-align: center; }
                .image-stats { justify-content: center; }
                .vuln-table { font-size: 0.85rem; }
                .vuln-table th, .vuln-table td { padding: 8px; }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="header-left">
                    <div class="namespace-icon"><i class="fas fa-cube"></i></div>
                    <div class="header-info">
                        <h1>{{ namespace }}</h1>
                        <p>Security Scan Results</p>
                    </div>
                </div>
                <div class="header-right">
                    <button onclick="exportResults()" class="btn btn-warning">
                        <i class="fas fa-download"></i> Export JSON
                    </button>
                    <a href="/scan/{{ namespace }}" class="btn btn-primary">
                        <i class="fas fa-redo"></i> Rescan
                    </a>
                    <a href="/" class="btn btn-secondary">
                        <i class="fas fa-home"></i> Home
                    </a>
                </div>
            </div>

            <div class="filters-section">
                <div class="filters-header">
                    <h3><i class="fas fa-filter"></i> Vulnerability Filters</h3>
                    <button class="filter-toggle" onclick="toggleFilters()">
                        <i class="fas fa-chevron-down" id="filterToggleIcon"></i> Show/Hide
                    </button>
                </div>
                <div class="filter-content" id="filterContent">
                    <div class="filter-grid">
                        <div class="filter-group">
                            <label class="filter-label">Severity Level</label>
                            <select id="severityFilter" class="filter-select">
                                <option value="">All Severities</option>
                                <option value="CRITICAL">Critical</option>
                                <option value="HIGH">High</option>
                                <option value="MEDIUM">Medium</option>
                                <option value="LOW">Low</option>
                                <option value="UNKNOWN">Unknown</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">Package Name</label>
                            <input type="text" id="packageFilter" class="filter-input" placeholder="Filter by package...">
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">Vulnerability ID</label>
                            <input type="text" id="vulnIdFilter" class="filter-input" placeholder="CVE-2023-xxxx">
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">Image Name</label>
                            <input type="text" id="imageFilter" class="filter-input" placeholder="Filter by image...">
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">Fix Available</label>
                            <select id="fixFilter" class="filter-select">
                                <option value="">All</option>
                                <option value="yes">Has Fix</option>
                                <option value="no">No Fix</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">CVSS Score</label>
                            <input type="number" id="cvssFilter" class="filter-input" placeholder="Min CVSS score..." min="0" max="10" step="0.1">
                        </div>
                    </div>
                    <div class="filter-actions">
                        <button onclick="clearAllFilters()" class="filter-btn filter-btn-secondary">
                            <i class="fas fa-times"></i> Clear All
                        </button>
                        <button onclick="applyFilters()" class="filter-btn filter-btn-primary">
                            <i class="fas fa-search"></i> Apply Filters
                        </button>
                    </div>
                    <div class="active-filters" id="activeFilters"></div>
                    <div class="results-summary" id="resultsSummary">
                        <span class="summary-text">Showing all vulnerabilities</span>
                        <span class="summary-count" id="summaryCount">{{ total_vulnerabilities }} total</span>
                    </div>
                </div>
            </div>

            <div class="stats-grid">
                <div class="stat-card stat-total">
                    <div class="stat-icon"><i class="fas fa-bug"></i></div>
                    <div class="stat-value" id="totalVulnCount">{{ total_vulnerabilities }}</div>
                    <div class="stat-label">Total Vulnerabilities</div>
                </div>
                <div class="stat-card stat-critical">
                    <div class="stat-icon"><i class="fas fa-exclamation-triangle"></i></div>
                    <div class="stat-value" id="criticalCount">{{ stats.CRITICAL }}</div>
                    <div class="stat-label">Critical</div>
                </div>
                <div class="stat-card stat-high">
                    <div class="stat-icon"><i class="fas fa-exclamation"></i></div>
                    <div class="stat-value" id="highCount">{{ stats.HIGH }}</div>
                    <div class="stat-label">High</div>
                </div>
                <div class="stat-card stat-medium">
                    <div class="stat-icon"><i class="fas fa-minus-circle"></i></div>
                    <div class="stat-value" id="mediumCount">{{ stats.MEDIUM }}</div>
                    <div class="stat-label">Medium</div>
                </div>
                <div class="stat-card stat-low">
                    <div class="stat-icon"><i class="fas fa-info-circle"></i></div>
                    <div class="stat-value" id="lowCount">{{ stats.LOW }}</div>
                    <div class="stat-label">Low</div>
                </div>
            </div>

            {% if results %}
            <div class="results-section" id="resultsSection">
                {% for result in results %}
                <div class="image-card" data-image="{{ result.image }}">
                    <div class="image-header">
                        <div class="image-info">
                            <h3>{{ result.image }}</h3>
                            <p><i class="fas fa-clock"></i> Scanned: {{ result.scan_time[:19].replace('T', ' ') }}</p>
                        </div>
                        <div class="image-stats">
                            {% set image_stats = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0} %}
                            {% for vuln in result.vulnerabilities %}
                                {% set _ = image_stats.update({vuln.severity: image_stats.get(vuln.severity, 0) + 1}) %}
                            {% endfor %}
                            
                            <div class="image-stat">
                                <div class="image-stat-value">{{ image_stats.CRITICAL }}</div>
                                <div class="image-stat-label">Critical</div>
                            </div>
                            <div class="image-stat">
                                <div class="image-stat-value">{{ image_stats.HIGH }}</div>
                                <div class="image-stat-label">High</div>
                            </div>
                            <div class="image-stat">
                                <div class="image-stat-value">{{ image_stats.MEDIUM }}</div>
                                <div class="image-stat-label">Medium</div>
                            </div>
                            <div class="image-stat">
                                <div class="image-stat-value">{{ image_stats.LOW }}</div>
                                <div class="image-stat-label">Low</div>
                            </div>
                        </div>
                    </div>

                    {% if result.vulnerabilities %}
                    <div class="vulnerabilities-table">
                        <table class="vuln-table">
                            <thead>
                                <tr>
                                    <th>Vulnerability ID</th>
                                    <th>Severity</th>
                                    <th>Package</th>
                                    <th>Installed Version</th>
                                    <th>Fixed Version</th>
                                    <th>CVSS Score</th>
                                    <th>Title</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for vuln in result.vulnerabilities %}
                                <tr class="vuln-row" 
                                    data-severity="{{ vuln.severity }}" 
                                    data-package="{{ vuln.pkg }}" 
                                    data-vuln-id="{{ vuln.id }}"
                                    data-image="{{ result.image }}"
                                    data-has-fix="{{ 'yes' if vuln.fixed else 'no' }}"
                                    data-cvss="{{ vuln.cvss_score or 0 }}">
                                    <td><div class="vuln-id">{{ vuln.id }}</div></td>
                                    <td><span class="severity-badge severity-{{ vuln.severity }}">{{ vuln.severity }}</span></td>
                                    <td>
                                        <div class="package-info">{{ vuln.pkg }}</div>
                                        {% if vuln.target %}
                                        <small style="color: #666;">{{ vuln.target }}</small>
                                        {% endif %}
                                    </td>
                                    <td><span class="version-badge">{{ vuln.installed or 'N/A' }}</span></td>
                                    <td>
                                        {% if vuln.fixed %}
                                        <span class="version-badge fixed-version">{{ vuln.fixed }}</span>
                                        {% else %}
                                        <span style="color: #dc3545; font-size: 0.8rem;">Not Fixed</span>
                                        {% endif %}
                                    </td>
                                    <td>
                                        {% if vuln.cvss_score %}
                                        <div style="display: inline-flex; align-items: center; gap: 5px; font-size: 0.8rem; color: #666;">
                                            <i class="fas fa-chart-line"></i>
                                            {{ "%.1f"|format(vuln.cvss_score) }}
                                        </div>
                                        {% else %}
                                        <span style="color: #666;">N/A</span>
                                        {% endif %}
                                    </td>
                                    <td>
                                        <div class="vuln-title">{{ vuln.title or 'No title available' }}</div>
                                        {% if vuln.description %}
                                        <button class="expand-btn" onclick="toggleDescription(this)">Show Description</button>
                                        <div class="description-full">{{ vuln.description }}</div>
                                        {% endif %}
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    {% else %}
                    <div style="padding: 20px; text-align: center; color: #28a745;">
                        <i class="fas fa-shield-alt" style="font-size: 2rem; margin-bottom: 10px;"></i>
                        <p>‚úÖ No vulnerabilities found in this image!</p>
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
            </div>
            {% else %}
            <div class="no-results">
                <i class="fas fa-shield-alt"></i>
                <h3>No Vulnerabilities Found!</h3>
                <p>Great news! No security vulnerabilities were detected in the scanned images for namespace <strong>{{ namespace }}</strong>.</p>
            </div>
            {% endif %}

            {% if results %}
            <div style="margin-top: 20px; text-align: center;">
                <p style="color: white; opacity: 0.8;">
                    <i class="fas fa-info-circle"></i>
                    Showing results for {{ results|length }} image(s) with <span id="visibleVulnCount">{{ total_vulnerabilities }}</span> vulnerabilities
                </p>
            </div>
            {% endif %}
        </div>

        <script>
            let currentFilters = { severity: '', package: '', vulnId: '', image: '', fix: '', cvss: '' };
            let filterExpanded = true;

            function toggleFilters() {
                const content = document.getElementById('filterContent');
                const icon = document.getElementById('filterToggleIcon');
                
                filterExpanded = !filterExpanded;
                content.style.display = filterExpanded ? 'block' : 'none';
                icon.className = filterExpanded ? 'fas fa-chevron-up' : 'fas fa-chevron-down';
            }

            function applyFilters() {
                currentFilters = {
                    severity: document.getElementById('severityFilter').value,
                    package: document.getElementById('packageFilter').value.toLowerCase().trim(),
                    vulnId: document.getElementById('vulnIdFilter').value.toLowerCase().trim(),
                    image: document.getElementById('imageFilter').value.toLowerCase().trim(),
                    fix: document.getElementById('fixFilter').value,
                    cvss: document.getElementById('cvssFilter').value
                };

                let visibleVulns = 0;
                let stats = { CRITICAL: 0, HIGH: 0, MEDIUM: 0, LOW: 0, UNKNOWN: 0 };
                
                const vulnRows = document.querySelectorAll('.vuln-row');
                vulnRows.forEach(row => {
                    let shouldShow = true;

                    if (currentFilters.severity && row.dataset.severity !== currentFilters.severity) shouldShow = false;
                    if (currentFilters.package && !row.dataset.package.toLowerCase().includes(currentFilters.package)) shouldShow = false;
                    if (currentFilters.vulnId && !row.dataset.vulnId.toLowerCase().includes(currentFilters.vulnId)) shouldShow = false;
                    if (currentFilters.image && !row.dataset.image.toLowerCase().includes(currentFilters.image)) shouldShow = false;
                    if (currentFilters.fix && row.dataset.hasFix !== currentFilters.fix) shouldShow = false;

                    if (currentFilters.cvss) {
                        const cvssScore = parseFloat(row.dataset.cvss) || 0;
                        if (cvssScore < parseFloat(currentFilters.cvss)) shouldShow = false;
                    }

                    if (shouldShow) {
                        row.classList.remove('hidden');
                        visibleVulns++;
                        stats[row.dataset.severity] = (stats[row.dataset.severity] || 0) + 1;
                    } else {
                        row.classList.add('hidden');
                    }
                });

                const imageCards = document.querySelectorAll('.image-card');
                imageCards.forEach(card => {
                    const visibleRows = card.querySelectorAll('.vuln-row:not(.hidden)');
                    if (visibleRows.length === 0 && card.querySelector('.vuln-row')) {
                        card.classList.add('hidden');
                    } else {
                        card.classList.remove('hidden');
                    }
                });

                updateStatCounts(stats, visibleVulns);
                updateActiveFilters();
                updateResultsSummary(visibleVulns);
            }

            function clearAllFilters() {
                document.getElementById('severityFilter').value = '';
                document.getElementById('packageFilter').value = '';
                document.getElementById('vulnIdFilter').value = '';
                document.getElementById('imageFilter').value = '';
                document.getElementById('fixFilter').value = '';
                document.getElementById('cvssFilter').value = '';
                
                currentFilters = { severity: '', package: '', vulnId: '', image: '', fix: '', cvss: '' };

                document.querySelectorAll('.vuln-row').forEach(row => row.classList.remove('hidden'));
                document.querySelectorAll('.image-card').forEach(card => card.classList.remove('hidden'));

                const originalStats = { CRITICAL: {{ stats.CRITICAL }}, HIGH: {{ stats.HIGH }}, MEDIUM: {{ stats.MEDIUM }}, LOW: {{ stats.LOW }}, UNKNOWN: {{ stats.UNKNOWN or 0 }} };
                updateStatCounts(originalStats, {{ total_vulnerabilities }});
                updateActiveFilters();
                updateResultsSummary({{ total_vulnerabilities }});
            }

            function updateStatCounts(stats, totalVulns) {
                document.getElementById('totalVulnCount').textContent = totalVulns;
                document.getElementById('criticalCount').textContent = stats.CRITICAL || 0;
                document.getElementById('highCount').textContent = stats.HIGH || 0;
                document.getElementById('mediumCount').textContent = stats.MEDIUM || 0;
                document.getElementById('lowCount').textContent = stats.LOW || 0;
                document.getElementById('visibleVulnCount').textContent = totalVulns;
            }

            function updateActiveFilters() {
                const activeFiltersContainer = document.getElementById('activeFilters');
                activeFiltersContainer.innerHTML = '';

                Object.keys(currentFilters).forEach(key => {
                    const value = currentFilters[key];
                    if (value) {
                        const tag = document.createElement('div');
                        tag.className = 'filter-tag';
                        tag.innerHTML = `<span>${key}: ${value}</span><span class="remove" onclick="removeFilter('${key}')">&times;</span>`;
                        activeFiltersContainer.appendChild(tag);
                    }
                });
            }

            function updateResultsSummary(visibleCount) {
                const summaryText = document.querySelector('.summary-text');
                const summaryCount = document.getElementById('summaryCount');
                
                const totalCount = {{ total_vulnerabilities }};
                summaryText.textContent = visibleCount === totalCount ? 'Showing all vulnerabilities' : 'Showing filtered vulnerabilities';
                summaryCount.textContent = `${visibleCount} of ${totalCount}`;
            }

            function removeFilter(filterKey) {
                const filterMap = {
                    severity: 'severityFilter', package: 'packageFilter', vulnId: 'vulnIdFilter',
                    image: 'imageFilter', fix: 'fixFilter', cvss: 'cvssFilter'
                };
                document.getElementById(filterMap[filterKey]).value = '';
                applyFilters();
            }

            function toggleDescription(button) {
                const description = button.nextElementSibling;
                const isShowing = description.classList.contains('show');
                
                description.classList.toggle('show', !isShowing);
                button.textContent = isShowing ? 'Show Description' : 'Hide Description';
            }

            function exportResults() {
                fetch(`/api/results/{{ namespace }}`)
                    .then(response => response.json())
                    .then(data => {
                        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `trivy-scan-{{ namespace }}-${new Date().toISOString().split('T')[0]}.json`;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                    })
                    .catch(error => {
                        console.error('Export failed:', error);
                        alert('Failed to export results');
                    });
            }

            ['severityFilter', 'packageFilter', 'vulnIdFilter', 'imageFilter', 'fixFilter', 'cvssFilter'].forEach(id => {
                document.getElementById(id).addEventListener(id.includes('Filter') && !id.includes('Filter') ? 'change' : 'input', applyFilters);
            });

            console.log('Enhanced Trivy Results interface loaded with advanced filtering capabilities');
        </script>
    </body>
    </html>
    '''

    @app.route("/", methods=["GET", "POST"])
    def index():
        if request.method == "POST":
            namespace = request.form["namespace"].strip()
            if not namespace:
                return render_template_string(INDEX_HTML, 
                                           namespaces=list(scan_results_by_namespace.keys()),
                                           error="Please enter a valid namespace")
            
            if namespace not in is_scanning_by_namespace or not is_scanning_by_namespace[namespace]:
                threading.Thread(target=scan_worker, args=(namespace,), daemon=True).start()
            return redirect(url_for("scan", namespace=namespace))

        scan_history = []
        for ns in scan_results_by_namespace.keys():
            metadata = scan_metadata_by_namespace.get(ns, {})
            results = scan_results_by_namespace.get(ns, [])
            stats, total_vulns = get_vulnerability_stats(results)
            
            scan_history.append({
                'namespace': ns,
                'metadata': metadata,
                'stats': stats,
                'total_vulnerabilities': total_vulns,
                'is_scanning': is_scanning_by_namespace.get(ns, False)
            })

        return render_template_string(INDEX_HTML, scan_history=scan_history)

    @app.route("/scan/<namespace>")
    def scan(namespace):
        metadata = scan_metadata_by_namespace.get(namespace, {})
        return render_template_string(SCAN_HTML, 
                                   namespace=namespace, 
                                   scanning=is_scanning_by_namespace.get(namespace, False),
                                   metadata=metadata)

    @app.route("/logs/<namespace>")
    def stream_logs(namespace):
        def generate():
            last_index = 0
            while is_scanning_by_namespace.get(namespace, False) or last_index < len(scan_logs_by_namespace.get(namespace, [])):
                logs = scan_logs_by_namespace.get(namespace, [])
                new_logs = logs[last_index:]
                for log in new_logs:
                    yield f"data: {json.dumps(log)}\n\n"
                last_index = len(logs)
                time.sleep(0.5)
            
            yield f"data: {json.dumps({'type': 'complete'})}\n\n"

        return Response(generate(), mimetype="text/event-stream")

    @app.route("/api/scan-status/<namespace>")
    def scan_status(namespace):
        """API endpoint for scan status"""
        return jsonify({
            'scanning': is_scanning_by_namespace.get(namespace, False),
            'metadata': scan_metadata_by_namespace.get(namespace, {}),
            'log_count': len(scan_logs_by_namespace.get(namespace, []))
        })

    @app.route("/results/<namespace>")
    def results(namespace):
        results = scan_results_by_namespace.get(namespace, [])
        metadata = scan_metadata_by_namespace.get(namespace, {})
        stats, total_vulns = get_vulnerability_stats(results)
        
        return render_template_string(RESULTS_HTML, 
                                   namespace=namespace, 
                                   results=results,
                                   metadata=metadata,
                                   stats=stats,
                                   total_vulnerabilities=total_vulns)

    @app.route("/api/results/<namespace>")
    def api_results(namespace):
        """API endpoint for results data with filtering"""
        results = scan_results_by_namespace.get(namespace, [])
        stats, total_vulns = get_vulnerability_stats(results)
        
        # Apply filters if provided
        severity_filter = request.args.get('severity')
        if severity_filter:
            filtered_results = []
            for result in results:
                filtered_vulns = [v for v in result.get('vulnerabilities', []) 
                                if v.get('severity') == severity_filter]
                if filtered_vulns:
                    result_copy = result.copy()
                    result_copy['vulnerabilities'] = filtered_vulns
                    filtered_results.append(result_copy)
            results = filtered_results
        
        return jsonify({
            'results': results,
            'stats': stats,
            'total_vulnerabilities': total_vulns,
            'metadata': scan_metadata_by_namespace.get(namespace, {})
        })

    @app.route("/debug/<namespace>")
    def debug_namespace(namespace):
        """Debug endpoint to diagnose issues"""
        try:
            images = get_all_images(namespace)
            acr_images = [img for img in images if is_acr_image(img)]
            pods = v1.list_namespaced_pod(namespace)
            pod_info = []
            
            for pod in pods.items:
                pod_data = {
                    'name': pod.metadata.name,
                    'status': pod.status.phase,
                    'containers': []
                }
                for container in pod.spec.containers:
                    pod_data['containers'].append({
                        'name': container.name,
                        'image': container.image,
                        'is_acr': is_acr_image(container.image)
                    })
                pod_info.append(pod_data)
            
            trivy_test = {}
            if images:
                test_image = images[0]
                try:
                    result = scan_image_with_trivy(test_image)
                    trivy_test = {
                        'test_image': test_image,
                        'is_acr': is_acr_image(test_image),
                        'return_code': result.returncode,
                        'stdout_length': len(result.stdout),
                        'stderr': result.stderr,
                        'has_output': bool(result.stdout.strip())
                    }
                    
                    if result.stdout:
                        try:
                            scan_json = json.loads(result.stdout)
                            trivy_test['json_keys'] = list(scan_json.keys())
                            trivy_test['results_count'] = len(scan_json.get('Results', []))
                        except json.JSONDecodeError:
                            trivy_test['json_error'] = 'Invalid JSON'
                            
                except Exception as e:
                    trivy_test['error'] = str(e)
            
            return jsonify({
                'namespace': namespace,
                'images_from_function': images,
                'image_count': len(images),
                'acr_images': acr_images,
                'acr_count': len(acr_images),
                'pod_count': len(pods.items),
                'pod_details': pod_info,
                'trivy_test': trivy_test,
                'acr_config': {
                    'registry_name': ACR_REGISTRY_NAME,
                    'has_credentials': bool(ACR_CLIENT_ID and ACR_CLIENT_SECRET and ACR_TENANT_ID),
                    'token_valid': is_acr_token_valid()
                }
            })
        except Exception as e:
            return jsonify({'error': str(e), 'error_type': type(e).__name__})

    @app.route("/test-trivy")
    def test_trivy():
        """Test trivy installation and basic functionality"""
        try:
            version_result = subprocess.run(
                ["trivy", "--version"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                timeout=10
            )
            
            test_result = subprocess.run(
                ["trivy", "image", "--format", "json", "alpine:latest"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                timeout=60
            )
            
            return jsonify({
                'trivy_version': {
                    'return_code': version_result.returncode,
                    'stdout': version_result.stdout,
                    'stderr': version_result.stderr
                },
                'trivy_test': {
                    'return_code': test_result.returncode,
                    'stdout_length': len(test_result.stdout),
                    'stderr': test_result.stderr,
                    'has_json_output': bool(test_result.stdout.strip())
                },
                'acr_status': {
                    'authenticated': is_acr_token_valid(),
                    'registry': ACR_REGISTRY_NAME,
                    'has_config': bool(ACR_CLIENT_ID and ACR_CLIENT_SECRET and ACR_TENANT_ID)
                }
            })
        except Exception as e:
            return jsonify({'error': str(e)})

    @app.route("/test-acr")
    def test_acr():
        """Test ACR authentication"""
        try:
            authenticate_with_acr()
            return jsonify({
                'status': 'success',
                'message': 'ACR authentication successful',
                'registry': ACR_REGISTRY_NAME,
                'token_valid': is_acr_token_valid()
            })
        except Exception as e:
            return jsonify({
                'status': 'error',
                'message': str(e),
                'registry': ACR_REGISTRY_NAME,
                'has_config': bool(ACR_CLIENT_ID and ACR_CLIENT_SECRET and ACR_TENANT_ID)
            })

    @app.route("/health")
    def health():
        return jsonify({
            "status": "healthy", 
            "timestamp": datetime.now().isoformat(),
            "acr_authenticated": is_acr_token_valid()
        })

    if __name__ == "__main__":
        log_message("üöÄ Starting Enhanced Trivy UI Application with ACR Support")
        log_message("üìä Debug endpoints available:")
        log_message("   - /debug/<namespace> - Debug namespace scanning")
        log_message("   - /test-trivy - Test Trivy installation")
        log_message("   - /test-acr - Test ACR authentication")
        log_message("üîê ACR Configuration:")
        log_message(f"   - Registry: {ACR_REGISTRY_NAME}")
        log_message(f"   - Has credentials: {bool(ACR_CLIENT_ID and ACR_CLIENT_SECRET and ACR_TENANT_ID)}")
        
        # Test ACR authentication on startup
        if ACR_CLIENT_ID and ACR_CLIENT_SECRET and ACR_TENANT_ID:
            try:
                authenticate_with_acr()
                log_message("‚úÖ Initial ACR authentication successful")
            except Exception as e:
                log_message(f"‚ö†Ô∏è Initial ACR authentication failed: {e}", "WARNING")
        else:
            log_message("‚ö†Ô∏è ACR credentials not configured - ACR images will fail to scan", "WARNING")
        
        app.run(debug=True, threaded=True, host='0.0.0.0', port=5000)

  requirements.txt: |
    kubernetes==28.1.0
    Flask==2.0.3
    Werkzeug==2.0.3 }
            .filter-label { font-weight: 600; color: #555; font-size: 0.9rem; text-transform: uppercase; }
            .filter-input, .filter-select {
                padding: 12px 15px; border: 2px solid #e0e0e0; border-radius: 8px;
                font-size: 1rem; transition: all 0.3s ease; background: white;
            }
            .filter-input:focus, .filter-select:focus {
                outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }
            .filter-actions { display: flex; gap: 10px; justify-content: flex-end; }
            .filter-btn {
                padding: 10px 20px; border: none; border-radius: 8px; cursor: pointer; 
                font-size: 1rem; font-weight: 500; transition: all 0.3s ease;
                display: flex; align-items: center; gap: 8px;
            }
            .filter-btn-primary { background: #667eea; color: white; }
            .filter-btn-secondary { background: #6c757d; color: white; }
            .filter-btn:hover { transform: translateY(-1px); box-shadow: 0 3px 10px rgba(0,0,0,0.2); }
            .active-filters { display: flex; gap: 10px; flex-wrap: wrap; margin-top: 15px; }
            .filter-tag {
                background: #e9ecef; padding: 5px 12px; border-radius: 20px; font-size: 0.85rem;
                display: flex; align-items: center; gap: 5px; color: #495057;
            }
            .filter-tag .remove { cursor: pointer; color: #dc3545; font-weight: bold; }
            .filter-tag .remove:hover { color: #c82333; }
            
            .history { 
                background: white; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); 
                overflow: hidden;
            }
            .history-header { 
                background: linear-gradient(45deg, #667eea, #764ba2); color: white; 
                padding: 25px; text-align: center;
            }
            .history-header h2 { font-size: 1.8rem; margin-bottom: 5px; }
            .history-grid { display: grid; gap: 20px; padding: 25px; }
            .history-card { 
                background: #f8f9fa; border-radius: 12px; padding: 20px; 
                border: 1px solid #e9ecef; transition: all 0.3s ease;
            }
            .history-card:hover { transform: translateY(-2px); box-shadow: 0 5px 20px rgba(0,0,0,0.1); }
            .history-card.hidden { display: none; }
            .card-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }
            .namespace-name { 
                font-size: 1.3rem; font-weight: 600; color: #333; 
                display: flex; align-items: center; gap: 10px;
            }
            .status-badge { 
                padding: 5px 12px; border-radius: 20px; font-size: 0.85rem; 
                font-weight: 600; text-transform: uppercase;
            }
            .status-scanning { background: #fff3cd; color: #856404; }
            .status-completed { background: #d4edda; color: #155724; }
            .status-failed { background: #f8d7da; color: #721c24; }
            .vuln-stats { 
                display: grid; grid-template-columns: repeat(auto-fit, minmax(80px, 1fr)); 
                gap: 10px; margin-bottom: 15px;
            }
            .vuln-stat { text-align: center; padding: 10px; border-radius: 8px; font-weight: 600; }
            .critical { background: #dc3545; color: white; }
            .high { background: #fd7e14; color: white; }
            .medium { background: #ffc107; color: #212529; }
            .low { background: #28a745; color: white; }
            .unknown { background: #6c757d; color: white; }
            .card-actions { display: flex; gap: 10px; justify-content: flex-end; }
            .btn-small { 
                padding: 8px 16px; font-size: 0.9rem; border-radius: 6px; 
                text-decoration: none; color: white; background: #6c757d; 
                transition: all 0.2s ease;
            }
            .btn-primary { background: #007bff; }
            .btn-success { background: #28a745; }
            .btn-small:hover { transform: translateY(-1px); opacity: 0.9; }
            .metadata-info { font-size: 0.9rem; color: #666; margin-top: 10px; }
            .empty-state { text-align: center; padding: 60px 20px; color: #666; }
            .empty-state i { font-size: 4rem; margin-bottom: 20px; opacity: 0.5; }
            .scanning-indicator { display: inline-flex; align-items: center; gap: 8px; }
            .spinner { 
                width: 16px; height: 16px; border: 2px solid #f3f3f3; 
                border-top: 2px solid #856404; border-radius: 50%; 
                animation: spin 1s linear infinite;
            }
            @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
            .results-summary { 
                background: #f8f9fa; padding: 15px; border-radius: 8px; margin-top: 10px;
                border-left: 4px solid #667eea;
            }
            .results-summary-text { font-size: 0.9rem; color: #555; }
            @media (max-width: 768px) {
                .container { padding: 10px; }
                .header h1 { font-size: 2rem; }
                .form-group { flex-direction: column; }
                .form-group input { min-width: auto; width: 100%; }
                .filter-grid { grid-template-columns: 1fr; }
                .filter-actions { flex-direction: column; }
                .vuln-stats { grid-template-columns: repeat(5, 1fr); gap: 5px; }
                .vuln-stat { padding: 8px 4px; font-size: 0.8rem; }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1><i class="fas fa-shield-alt"></i> Trivy Security Scanner</h1>
                <p>Kubernetes Container Vulnerability Assessment</p>
            </div>
            
            <div class="scan-form">
                <form method="POST">
                    {% if error %}
                    <div class="error">
                        <i class="fas fa-exclamation-triangle"></i> {{ error }}
                    </div>
                    {% endif %}
                    <div class="form-group">
                        <input name="namespace" placeholder="Enter Kubernetes Namespace" required />
                        <button type="submit" class="btn">
                            <i class="fas fa-search"></i> Start Scan
                        </button>
                    </div>
                </form>
            </div>

            <!-- Enhanced Filters Section -->
            <div class="filters-section" id="filtersSection">
                <div class="filters-header">
                    <h3><i class="fas fa-filter"></i> Filters</h3>
                </div>
                <div class="filter-grid">
                    <div class="filter-group">
                        <label class="filter-label">Namespace</label>
                        <input type="text" id="namespaceFilter" class="filter-input" placeholder="Filter by namespace...">
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Vulnerability Level</label>
                        <select id="severityFilter" class="filter-select">
                            <option value="">All Severities</option>
                            <option value="CRITICAL">Critical</option>
                            <option value="HIGH">High</option>
                            <option value="MEDIUM">Medium</option>
                            <option value="LOW">Low</option>
                            <option value="UNKNOWN">Unknown</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Status</label>
                        <select id="statusFilter" class="filter-select">
                            <option value="">All Statuses</option>
                            <option value="scanning">Scanning</option>
                            <option value="completed">Completed</option>
                            <option value="failed">Failed</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Minimum Vulnerabilities</label>
                        <input type="number" id="minVulnsFilter" class="filter-input" placeholder="Min count..." min="0">
                    </div>
                </div>
                <div class="filter-actions">
                    <button onclick="clearFilters()" class="filter-btn filter-btn-secondary">
                        <i class="fas fa-times"></i> Clear Filters
                    </button>
                    <button onclick="applyFilters()" class="filter-btn filter-btn-primary">
                        <i class="fas fa-search"></i> Apply Filters
                    </button>
                </div>
                <div class="active-filters" id="activeFilters"></div>
            </div>

            {% if scan_history %}
            <div class="history">
                <div class="history-header">
                    <h2><i class="fas fa-history"></i> Scan History</h2>
                    <p>View and manage your security scans</p>
                </div>
                <div class="history-grid" id="historyGrid">
                    {% for scan in scan_history %}
                    <div class="history-card" 
                         data-namespace="{{ scan.namespace }}" 
                         data-status="{{ scan.metadata.get('status', 'unknown') }}"
                         data-critical="{{ scan.stats.CRITICAL }}"
                         data-high="{{ scan.stats.HIGH }}"
                         data-medium="{{ scan.stats.MEDIUM }}"
                         data-low="{{ scan.stats.LOW }}"
                         data-unknown="{{ scan.stats.UNKNOWN }}"
                         data-total-vulns="{{ scan.total_vulnerabilities }}">
                        <div class="card-header">
                            <div class="namespace-name">
                                <i class="fas fa-cube"></i>
                                {{ scan.namespace }}
                            </div>
                            <div class="status-badge status-{{ scan.metadata.get('status', 'unknown') }}">
                                {% if scan.is_scanning %}
                                    <div class="scanning-indicator">
                                        <div class="spinner"></div>
                                        Scanning
                                    </div>
                                {% else %}
                                    {{ scan.metadata.get('status', 'Unknown').title() }}
                                {% endif %}
                            </div>
                        </div>

                        {% if scan.total_vulnerabilities > 0 %}
                        <div class="vuln-stats">
                            <div class="vuln-stat critical" title="Critical Vulnerabilities">
                                <div>{{ scan.stats.CRITICAL }}</div>
                                <small>CRIT</small>
                            </div>
                            <div class="vuln-stat high" title="High Vulnerabilities">
                                <div>{{ scan.stats.HIGH }}</div>
                                <small>HIGH</small>
                            </div>
                            <div class="vuln-stat medium" title="Medium Vulnerabilities">
                                <div>{{ scan.stats.MEDIUM }}</div>
                                <small>MED</small>
                            </div>
                            <div class="vuln-stat low" title="Low Vulnerabilities">
                                <div>{{ scan.stats.LOW }}</div>
                                <small>LOW</small>
                            </div>
                            <div class="vuln-stat unknown" title="Unknown Vulnerabilities">
                                <div>{{ scan.stats.UNKNOWN }}</div>
                                <small>UNK</small>
                            </div>
                        </div>
                        {% endif %}

                        <div class="metadata-info">
                            {% if scan.metadata.get('start_time') %}
                                <i class="fas fa-clock"></i> 
                                Scanned: {{ scan.metadata.start_time[:19].replace('T', ' ') }}
                            {% endif %}
                            {% if scan.metadata.get('total_images') %}
                                | <i class="fas fa-images"></i> 
                                Images: {{ scan.metadata.get('scanned_images', 0) }}/{{ scan.metadata.total_images }}
                            {% endif %}
                            {% if scan.total_vulnerabilities > 0 %}
                                | <i class="fas fa-bug"></i> 
                                Total Vulnerabilities: {{ scan.total_vulnerabilities }}
                            {% endif %}
                        </div>

                        <div class="results-summary">
                            <div class="results-summary-text">
                                {% if scan.stats.CRITICAL > 0 %}
                                    <span style="color: #dc3545;"><strong>{{ scan.stats.CRITICAL }} Critical</strong></span>
                                {% endif %}
                                {% if scan.stats.HIGH > 0 %}
                                    {% if scan.stats.CRITICAL > 0 %}, {% endif %}
                                    <span style="color: #fd7e14;"><strong>{{ scan.stats.HIGH }} High</strong></span>
                                {% endif %}
                                {% if scan.stats.MEDIUM > 0 %}
                                    {% if scan.stats.CRITICAL > 0 or scan.stats.HIGH > 0 %}, {% endif %}
                                    <span style="color: #ffc107;"><strong>{{ scan.stats.MEDIUM }} Medium</strong></span>
                                {% endif %}
                                {% if scan.total_vulnerabilities == 0 %}
                                    <span style="color: #28a745;"><i class="fas fa-shield-alt"></i> No vulnerabilities found!</span>
                                {% endif %}
                            </div>
                        </div>

                        <div class="card-actions">
                            {% if scan.is_scanning %}
                                <a href="/scan/{{ scan.namespace }}" class="btn-small btn-primary">
                                    <i class="fas fa-eye"></i> Watch Scan
                                </a>
                            {% else %}
                                <a href="/results/{{ scan.namespace }}" class="btn-small btn-success">
                                    <i class="fas fa-chart-bar"></i> View Results
                                </a>
                                <a href="/scan/{{ scan.namespace }}" class="btn-small">
                                    <i class="fas fa-redo"></i> Rescan
                                </a>
                            {% endif %}
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
            {% else %}
            <div class="history">
                <div class="history-header">
                    <h2><i class="fas fa-history"></i> Scan History</h2>
                    <p>View and manage your security scans</p>
                </div>
                <div class="empty-state">
                    <i class="fas fa-search"></i>
                    <h3>No scans yet</h3>
                    <p>Start by entering a Kubernetes namespace above to begin your first security scan.</p>
                </div>
            </div>
            {% endif %}
        </div>

        <script>
            // Show filters if there are scan results
            const scanHistory = {{ scan_history | tojson if scan_history else '[]' }};
            if (scanHistory && scanHistory.length > 0) {
                document.getElementById('filtersSection').classList.add('show');
            }

            let currentFilters = {
                namespace: '',
                severity: '',
                status: '',
                minVulns: ''
            };

            function applyFilters() {
                const namespaceFilter = document.getElementById('namespaceFilter').value.toLowerCase().trim();
                const severityFilter = document.getElementById('severityFilter').value;
                const statusFilter = document.getElementById('statusFilter').value;
                const minVulnsFilter = document.getElementById('minVulnsFilter').value;

                currentFilters = {
                    namespace: namespaceFilter,
                    severity: severityFilter,
                    status: statusFilter,
                    minVulns: minVulnsFilter
                };

                const cards = document.querySelectorAll('.history-card');
                let visibleCount = 0;

                cards.forEach(card => {
                    const namespace = card.querySelector('.namespace-name').textContent.toLowerCase().trim();
                    const status = card.dataset.status;
                    const totalVulns = parseInt(card.dataset.totalVulns) || 0;
                    
                    const critical = parseInt(card.dataset.critical) || 0;
                    const high = parseInt(card.dataset.high) || 0;
                    const medium = parseInt(card.dataset.medium) || 0;
                    const low = parseInt(card.dataset.low) || 0;
                    const unknown = parseInt(card.dataset.unknown) || 0;

                    let shouldShow = true;

                    if (namespaceFilter && !namespace.includes(namespaceFilter)) {
                        shouldShow = false;
                    }

                    if (statusFilter && status !== statusFilter) {
                        shouldShow = false;
                    }

                    if (minVulnsFilter && totalVulns < parseInt(minVulnsFilter)) {
                        shouldShow = false;
                    }

                    if (severityFilter) {
                        let hasRequiredSeverity = false;
                        switch (severityFilter) {
                            case 'CRITICAL': hasRequiredSeverity = critical > 0; break;
                            case 'HIGH': hasRequiredSeverity = high > 0; break;
                            case 'MEDIUM': hasRequiredSeverity = medium > 0; break;
                            case 'LOW': hasRequiredSeverity = low > 0; break;
                            case 'UNKNOWN': hasRequiredSeverity = unknown > 0; break;
                        }
                        if (!hasRequiredSeverity) {
                            shouldShow = false;
                        }
                    }

                    if (shouldShow) {
                        card.classList.remove('hidden');
                        visibleCount++;
                    } else {
                        card.classList.add('hidden');
                    }
                });

                updateActiveFilters();
                console.log(`Filters applied. Showing ${visibleCount} of ${cards.length} scans.`);
            }

            function clearFilters() {
                document.getElementById('namespaceFilter').value = '';
                document.getElementById('severityFilter').value = '';
                document.getElementById('statusFilter').value = '';
                document.getElementById('minVulnsFilter').value = '';
                
                currentFilters = { namespace: '', severity: '', status: '', minVulns: '' };

                const cards = document.querySelectorAll('.history-card');
                cards.forEach(card => card.classList.remove('hidden'));

                updateActiveFilters();
                console.log('All filters cleared');
            }

            function updateActiveFilters() {
                const activeFiltersContainer = document.getElementById('activeFilters');
                activeFiltersContainer.innerHTML = '';

                Object.keys(currentFilters).forEach(key => {
                    const value = currentFilters[key];
                    if (value) {
                        const tag = document.createElement('div');
                        tag.className = 'filter-tag';
                        tag.innerHTML = `
                            <span>${key}: ${value}</span>
                            <span class="remove" onclick="removeFilter('${key}')">&times;</span>
                        `;
                        activeFiltersContainer.appendChild(tag);
                    }
                });
            }

            function removeFilter(filterKey) {
                switch (filterKey) {
                    case 'namespace': document.getElementById('namespaceFilter').value = ''; break;
                    case 'severity': document.getElementById('severityFilter').value = ''; break;
                    case 'status': document.getElementById('statusFilter').value = ''; break;
                    case 'minVulns': document.getElementById('minVulnsFilter').value = ''; break;
                }
                applyFilters();
            }

            document.getElementById('namespaceFilter').addEventListener('input', applyFilters);
            document.getElementById('severityFilter').addEventListener('change', applyFilters);
            document.getElementById('statusFilter').addEventListener('change', applyFilters);
            document.getElementById('minVulnsFilter').addEventListener('input', applyFilters);

            setTimeout(() => {
                const hasActiveScans = document.querySelector('.status-scanning');
                if (hasActiveScans) { location.reload(); }
            }, 30000);

            console.log('Trivy Scanner interface loaded with enhanced filtering');
        </script>
    </body>
    </html>
    '''

    SCAN_HTML = '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Scanning {{ namespace }} - Trivy Scanner</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh; color: #333;
            }
            .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
            .header {
                background: white; border-radius: 15px; padding: 25px; margin-bottom: 25px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2); display: flex;
                justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 20px;
            }
            .header-left { display: flex; align-items: center; gap: 15px; }
            .namespace-icon {
                width: 60px; height: 60px; background: linear-gradient(45deg, #667eea, #764ba2);
                border-radius: 12px; display: flex; align-items: center; justify-content: center;
                color: white; font-size: 1.5rem;
            }
            .header-info h1 { font-size: 1.8rem; margin-bottom: 5px; color: #333; }
            .header-info p { color: #666; font-size: 1rem; }
            .header-right { display: flex; gap: 10px; }
            .btn {
                padding: 12px 20px; border: none; border-radius: 8px; font-size: 1rem;
                cursor: pointer; text-decoration: none; display: inline-flex;
                align-items: center; gap: 8px; transition: all 0.3s ease; font-weight: 500;
            }
            .btn-primary { background: #007bff; color: white; }
            .btn-secondary { background: #6c757d; color: white; }
            .btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); }
            .progress-section {
                background: white; border-radius: 15px; padding: 25px; margin-bottom: 25px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            }
            .progress-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
            .progress-header h2 { display: flex; align-items: center; gap: 10px; }
            .status-badge { padding: 8px 16px; border-radius: 20px; font-size: 0.9rem; font-weight: 600; text-transform: uppercase; }
            .status-scanning {
                background: #fff3cd; color: #856404; display: flex; align-items: center; gap: 8px;
            }
            .status-completed { background: #d4edda; color: #155724; }
            .spinner {
                width: 16px; height: 16px; border: 2px solid #f3f3f3; border-top: 2px solid #856404;
                border-radius: 50%; animation: spin 1s linear infinite;
            }
            @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
            .progress-bar-container { background: #f8f9fa; border-radius: 10px; height: 20px; overflow: hidden; margin-bottom: 15px; }
            .progress-bar {
                height: 100%; background: linear-gradient(45deg, #28a745, #20c997); border-radius: 10px;
                transition: width 0.5s ease; display: flex; align-items: center; justify-content: center;
                color: white; font-size: 0.8rem; font-weight: 600;
            }
            .progress-stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; }
            .stat-card { background: #f8f9fa; padding: 15px; border-radius: 10px; text-align: center; border: 1px solid #e9ecef; }
            .stat-value { font-size: 1.5rem; font-weight: 700; color: #333; }
            .stat-label { font-size: 0.9rem; color: #666; margin-top: 5px; }
            .log-section { background: #1a1a1a; border-radius: 15px; overflow: hidden; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }
            .log-header { background: #333; color: white; padding: 20px; display: flex; justify-content: space-between; align-items: center; }
            .log-header h3 { display: flex; align-items: center; gap: 10px; }
            .log-controls { display: flex; gap: 10px; }
            .log-btn {
                background: #495057; color: white; border: none; padding: 8px 12px;
                border-radius: 6px; cursor: pointer; font-size: 0.85rem; transition: background 0.2s;
            }
            .log-btn:hover { background: #6c757d; }
            .log-container {
                height: 500px; overflow-y: auto; padding: 20px; background: #1a1a1a;
                color: #00ff00; font-family: 'Courier New', monospace; font-size: 0.9rem; line-height: 1.4;
            }
            .log-entry { margin-bottom: 8px; padding: 5px 10px; border-radius: 4px; display: flex; align-items: flex-start; gap: 10px; }
            .log-timestamp { color: #888; font-size: 0.8rem; white-space: nowrap; min-width: 80px; }
            .log-level {
                font-weight: bold; min-width: 60px; text-align: center; padding: 2px 6px;
                border-radius: 3px; font-size: 0.75rem;
            }
            .log-INFO { background: #17a2b8; color: white; }
            .log-SUCCESS { background: #28a745; color: white; }
            .log-WARNING { background: #ffc107; color: #212529; }
            .log-ERROR { background: #dc3545; color: white; }
            .log-message { flex: 1; word-break: break-word; }
            .completion-banner {
                background: linear-gradient(45deg, #28a745, #20c997); color: white;
                padding: 20px; border-radius: 10px; margin-bottom: 20px; text-align: center; display: none;
            }
            .completion-banner.show { display: block; animation: slideIn 0.5s ease; }
            @keyframes slideIn { from { transform: translateY(-20px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
            @media (max-width: 768px) {
                .container { padding: 10px; }
                .header { flex-direction: column; text-align: center; }
                .progress-stats { grid-template-columns: repeat(2, 1fr); }
                .log-container { height: 400px; font-size: 0.8rem; }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="header-left">
                    <div class="namespace-icon"><i class="fas fa-cube"></i></div>
                    <div class="header-info">
                        <h1>{{ namespace }}</h1>
                        <p>Security Vulnerability Scan</p>
                    </div>
                </div>
                <div class="header-right">
                    <a href="/results/{{ namespace }}" class="btn btn-primary">
                        <i class="fas fa-chart-bar"></i> View Results
                    </a>
                    <a href="/" class="btn btn-secondary">
                        <i class="fas fa-home"></i> Home
                    </a>
                </div>
            </div>

            <div class="completion-banner" id="completionBanner">
                <h3><i class="fas fa-check-circle"></i> Scan Completed Successfully!</h3>
                <p>Click "View Results" to see the vulnerability report</p>
            </div>

            <div class="progress-section">
                <div class="progress-header">
                    <h2><i class="fas fa-tasks"></i> Scan Progress</h2>
                    <div class="status-badge" id="statusBadge">
                        {% if scanning %}
                            <div class="status-scanning">
                                <div class="spinner"></div>
                                Scanning
                            </div>
                        {% else %}
                            <div class="status-completed">Completed</div>
                        {% endif %}
                    </div>
                </div>

                <div class="progress-bar-container">
                    <div class="progress-bar" id="progressBar" style="width: 0%">0%</div>
                </div>

                <div class="progress-stats">
                    <div class="stat-card">
                        <div class="stat-value" id="totalImages">{{ metadata.get('total_images', 0) }}</div>
                        <div class="stat-label">Total Images</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="scannedImages">{{ metadata.get('scanned_images', 0) }}</div>
                        <div class="stat-label">Scanned</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="failedImages">{{ metadata.get('failed_images', 0) }}</div>
                        <div class="stat-label">Failed</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="logCount">0</div>
                        <div class="stat-label">Log Entries</div>
                    </div>
                </div>
            </div>

            <div class="log-section">
                <div class="log-header">
                    <h3><i class="fas fa-terminal"></i> Scan Logs</h3>
                    <div class="log-controls">
                        <button class="log-btn" id="autoScrollBtn" onclick="toggleAutoScroll()">
                            <i class="fas fa-arrow-down"></i> Auto Scroll: ON
                        </button>
                        <button class="log-btn" onclick="clearLogs()">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                    </div>
                </div>
                <div class="log-container" id="logContainer">
                    <div class="log-entry">
                        <span class="log-timestamp">--:--:--</span>
                        <span class="log-level log-INFO">INFO</span>
                        <span class="log-message">Initializing scan for namespace: {{ namespace }}</span>
                    </div>
                </div>
            </div>
        </div>

        <script>
            let autoScroll = true;
            let logCount = 0;
            let isScanning = {{ 'true' if scanning else 'false' }};

            const logContainer = document.getElementById('logContainer');
            const autoScrollBtn = document.getElementById('autoScrollBtn');
            const statusBadge = document.getElementById('statusBadge');
            const progressBar = document.getElementById('progressBar');
            const completionBanner = document.getElementById('completionBanner');

            const source = new EventSource('/logs/{{ namespace }}');

            source.onmessage = function(event) {
                try {
                    const logData = JSON.parse(event.data);
                    
                    if (logData.type === 'complete') {
                        handleScanComplete();
                        return;
                    }

                    addLogEntry(logData);
                    updateStats();
                    
                } catch (e) {
                    addLegacyLogEntry(event.data);
                }
            };

            source.onerror = function() {
                if (isScanning) {
                    setTimeout(() => location.reload(), 5000);
                }
            };

            function addLogEntry(logData) {
                const timestamp = new Date(logData.timestamp).toLocaleTimeString();
                const level = logData.level || 'INFO';
                const message = logData.message || '';

                const logEntry = document.createElement('div');
                logEntry.className = 'log-entry';
                logEntry.innerHTML = `
                    <span class="log-timestamp">${timestamp}</span>
                    <span class="log-level log-${level}">${level}</span>
                    <span class="log-message">${message}</span>
                `;

                logContainer.appendChild(logEntry);
                logCount++;

                if (autoScroll) {
                    logContainer.scrollTop = logContainer.scrollHeight;
                }
            }

            function addLegacyLogEntry(message) {
                const logEntry = document.createElement('div');
                logEntry.className = 'log-entry';
                logEntry.innerHTML = `
                    <span class="log-timestamp">${new Date().toLocaleTimeString()}</span>
                    <span class="log-level log-INFO">INFO</span>
                    <span class="log-message">${message}</span>
                `;

                logContainer.appendChild(logEntry);
                logCount++;

                if (autoScroll) {
                    logContainer.scrollTop = logContainer.scrollHeight;
                }
            }

            function updateStats() {
                fetch(`/api/scan-status/{{ namespace }}`)
                    .then(response => response.json())
                    .then(data => {
                        const metadata = data.metadata || {};
                        const totalImages = metadata.total_images || 0;
                        const scannedImages = metadata.scanned_images || 0;
                        const failedImages = metadata.failed_images || 0;

                        document.getElementById('totalImages').textContent = totalImages;
                        document.getElementById('scannedImages').textContent = scannedImages;
                        document.getElementById('failedImages').textContent = failedImages;
                        document.getElementById('logCount').textContent = logCount;

                        if (totalImages > 0) {
                            const progress = (scannedImages / totalImages) * 100;
                            progressBar.style.width = progress + '%';
                            progressBar.textContent = Math.round(progress) + '%';
                        }

                        isScanning = data.scanning;
                        if (!isScanning && metadata.status === 'completed') {
                            handleScanComplete();
                        }
                    })
                    .catch(console.error);
            }

            function handleScanComplete() {
                isScanning = false;
                source.close();
                
                statusBadge.innerHTML = '<div class="status-completed">Completed</div>';
                completionBanner.classList.add('show');
                
                setTimeout(() => {
                    window.location.href = '/results/{{ namespace }}';
                }, 3000);
            }

            function toggleAutoScroll() {
                autoScroll = !autoScroll;
                autoScrollBtn.innerHTML = autoScroll 
                    ? '<i class="fas fa-arrow-down"></i> Auto Scroll: ON'
                    : '<i class="fas fa-pause"></i> Auto Scroll: OFF';
            }

            function clearLogs() {
                logContainer.innerHTML = '';
                logCount = 0;
                document.getElementById('logCount').textContent = '0';
            }

            setInterval(updateStats, 2000);
            updateStats();
        </script>
    </body>
    </html>
    '''

    RESULTS_HTML = '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Results - {{ namespace }} - Trivy Scanner</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh; color: #333;
            }
            .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
            .header {
                background: white; border-radius: 15px; padding: 25px; margin-bottom: 25px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2); display: flex;
                justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 20px;
            }
            .header-left { display: flex; align-items: center; gap: 15px; }
            .namespace-icon {
                width: 60px; height: 60px; background: linear-gradient(45deg, #667eea, #764ba2);
                border-radius: 12px; display: flex; align-items: center; justify-content: center;
                color: white; font-size: 1.5rem;
            }
            .header-info h1 { font-size: 1.8rem; margin-bottom: 5px; color: #333; }
            .header-info p { color: #666; font-size: 1rem; }
            .header-right { display: flex; gap: 10px; flex-wrap: wrap; }
            .btn {
                padding: 12px 20px; border: none; border-radius: 8px; font-size: 1rem;
                cursor: pointer; text-decoration: none; display: inline-flex;
                align-items: center; gap: 8px; transition: all 0.3s ease; font-weight: 500;
            }
            .btn-primary { background: #007bff; color: white; }
            .btn-secondary { background: #6c757d; color: white; }
            .btn-warning { background: #ffc107; color: #212529; }
            .btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); }

            .filters-section {
                background: white; border-radius: 15px; padding: 25px; margin-bottom: 25px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            }
            .filters-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
            .filters-header h3 { color: #333; font-size: 1.5rem; display: flex; align-items: center; gap: 10px; }
            .filter-toggle { 
                background: #667eea; color: white; border: none; padding: 8px 16px; 
                border-radius: 6px; cursor: pointer; font-size: 0.9rem;
            }
            .filter-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px; }
            .filter-group { display: flex; flex-direction: column; gap: 8px;

apiVersion: v1
kind: ConfigMap
metadata:
  name: image-scanner-script
  namespace: default
data:
  scanner.py: "#!/usr/bin/env python3\nimport subprocess\nimport json\nimport threading\nimport os\nimport time\nimport sys\nfrom datetime import datetime\nfrom kubernetes import client, config\nfrom flask import Flask, render_template_string, request, Response, redirect, url_for, jsonify\n\napp = Flask(__name__)\n\n# ACR Configuration - Set these as environment variables\nACR_CLIENT_ID = os.getenv('AZURE_CLIENT_ID')\nACR_CLIENT_SECRET = os.getenv('AZURE_CLIENT_SECRET')\nACR_TENANT_ID = os.getenv('AZURE_TENANT_ID')\nACR_REGISTRY_NAME = os.getenv('ACR_REGISTRY_NAME', 'azops')\n\n# Global variable to store ACR token\nacr_token = None\ntoken_expiry = None\n\n# Enhanced logging function\ndef log_message(message, level=\"INFO\"):\n    \"\"\"Enhanced logging with console output and timestamp\"\"\"\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    formatted_message = f\"[{timestamp}] [{level}] {message}\"\n    print(formatted_message, flush=True)  # Force flush to ensure immediate output\n    sys.stdout.flush()\n    return formatted_message\n\n# Load Kubernetes config\ntry:\n    config.load_incluster_config()\n    v1 = client.CoreV1Api()\n    log_message(\"✅ Successfully loaded Kubernetes in-cluster config\")\nexcept Exception as e:\n    log_message(f\"❌ Failed to load Kubernetes config: {e}\", \"ERROR\")\n    try:\n        config.load_kube_config()\n        v1 = client.CoreV1Api()\n        log_message(\"✅ Successfully loaded Kubernetes config from file\")\n    except Exception as e2:\n        log_message(f\"❌ Failed to load any Kubernetes config: {e2}\", \"ERROR\")\n        exit(1)\n\n# Enhanced data structures\nscan_results_by_namespace = {}\nscan_logs_by_namespace = {}\nscan_metadata_by_namespace = {}\nis_scanning_by_namespace = {}\n\ndef authenticate_with_acr():\n    \"\"\"Authenticate with Azure Container Registry and get access token\"\"\"\n    global acr_token, token_expiry\n    \n    log_message(\"\U0001F510 Authenticating with Azure Container Registry...\")\n    \n    if not all([ACR_CLIENT_ID, ACR_CLIENT_SECRET, ACR_TENANT_ID]):\n        raise Exception(\"Missing required environment variables: CLIENT_ID, CLIENT_SECRET, TENANT_ID\")\n    \n    try:\n        log_message(f\"\U0001F511 Logging in to Azure with service principal...\")\n        login_cmd = [\n            \"az\", \"login\", \"--service-principal\",\n            \"--username\", ACR_CLIENT_ID,\n            \"--password\", ACR_CLIENT_SECRET,\n            \"--tenant\", ACR_TENANT_ID\n        ]\n        \n        login_result = subprocess.run(\n            login_cmd,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            timeout=60\n        )\n        \n        if login_result.returncode != 0:\n            raise Exception(f\"Azure login failed: {login_result.stderr}\")\n        \n        log_message(\"✅ Successfully logged in to Azure\")\n        \n        log_message(f\"\U0001F3AB Getting ACR access token for registry: {ACR_REGISTRY_NAME}\")\n        token_cmd = [\n            \"az\", \"acr\", \"login\",\n            \"-n\", ACR_REGISTRY_NAME,\n            \"--expose-token\",\n            \"--output\", \"tsv\",\n            \"--query\", \"accessToken\"\n        ]\n        \n        token_result = subprocess.run(\n            token_cmd,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            timeout=60\n        )\n        \n        if token_result.returncode != 0:\n            raise Exception(f\"ACR token retrieval failed: {token_result.stderr}\")\n        \n        acr_token = token_result.stdout.strip()\n        if not acr_token:\n            raise Exception(\"Received empty ACR token\")\n        \n        token_expiry = datetime.now().timestamp() + (2.5 * 3600)\n        log_message(\"✅ Successfully obtained ACR access token\")\n        return True\n        \n    except subprocess.TimeoutExpired:\n        raise Exception(\"Authentication timeout - Azure CLI commands took too long\")\n    except Exception as e:\n        log_message(f\"❌ ACR authentication failed: {str(e)}\", \"ERROR\")\n        raise\n\ndef is_acr_token_valid():\n    \"\"\"Check if the current ACR token is still valid\"\"\"\n    global acr_token, token_expiry\n    \n    if not acr_token or not token_expiry:\n        return False\n    \n    return datetime.now().timestamp() < (token_expiry - 300)\n\ndef ensure_acr_authentication():\n    \"\"\"Ensure we have a valid ACR token, refresh if needed\"\"\"\n    if not is_acr_token_valid():\n        log_message(\"\U0001F504 ACR token expired or missing, refreshing...\")\n        authenticate_with_acr()\n\ndef is_acr_image(image):\n    \"\"\"Check if an image is from Azure Container Registry\"\"\"\n    return f\"{ACR_REGISTRY_NAME}.azurecr.io\" in image\n\ndef get_all_images(namespace):\n    \"\"\"Get all unique images from a namespace with debug logging\"\"\"\n    images = set()\n    try:\n        log_message(f\"Attempting to list pods in namespace: {namespace}\")\n        pods = v1.list_namespaced_pod(namespace)\n        log_message(f\"Found {len(pods.items)} pods in namespace {namespace}\")\n        \n        for pod in pods.items:\n            log_message(f\"Pod {pod.metadata.name} status: {pod.status.phase}\")\n            if pod.spec.containers:\n                for container in pod.spec.containers:\n                    log_message(f\"Container {container.name} image: {container.image}\")\n                    images.add(container.image)\n            \n            if pod.spec.init_containers:\n                for container in pod.spec.init_containers:\n                    log_message(f\"Init container {container.name} image: {container.image}\")\n                    images.add(container.image)\n        \n        log_message(f\"Total unique images found: {list(images)}\")\n    except Exception as e:\n        log_message(f\"Error getting images from namespace {namespace}: {e}\", \"ERROR\")\n    return list(images)\n\ndef get_vulnerability_stats(results):\n    \"\"\"Calculate vulnerability statistics\"\"\"\n    stats = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0, 'UNKNOWN': 0}\n    total_vulns = 0\n    \n    for result in results:\n        for vuln in result.get('vulnerabilities', []):\n            severity = vuln.get('severity', 'UNKNOWN')\n            stats[severity] = stats.get(severity, 0) + 1\n            total_vulns += 1\n    \n    return stats, total_vulns\n\ndef scan_image_with_trivy(image):\n    \"\"\"Scan a single image with Trivy, handling ACR authentication\"\"\"\n    log_message(f\"\U0001F50D Scanning image: {image}\")\n    \n    cmd = [\"trivy\", \"image\", \"--quiet\", \"--format\", \"json\"]\n    \n    if is_acr_image(image):\n        ensure_acr_authentication()\n        log_message(f\"\U0001F510 Using ACR authentication for image: {image}\")\n        cmd.extend([\n            \"--username\", \"00000000-0000-0000-0000-000000000000\",\n            \"--password\", acr_token\n        ])\n    \n    cmd.append(image)\n    \n    log_message(f\"Running command: {' '.join(cmd[:7])}... [credentials hidden]\")\n    \n    result = subprocess.run(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        text=True,\n        timeout=300,\n        check=False\n    )\n    \n    return result\n\ndef scan_worker(namespace):\n    \"\"\"Enhanced scan worker with comprehensive debugging and ACR support\"\"\"\n    global scan_results_by_namespace, scan_logs_by_namespace, scan_metadata_by_namespace, is_scanning_by_namespace\n    \n    log_message(f\"=== STARTING SCAN FOR NAMESPACE: {namespace} ===\")\n    \n    # Initialize data structures\n    scan_results_by_namespace[namespace] = []\n    scan_logs_by_namespace[namespace] = []\n    scan_metadata_by_namespace[namespace] = {\n        'start_time': datetime.now().isoformat(),\n        'end_time': None,\n        'status': 'scanning',\n        'total_images': 0,\n        'scanned_images': 0,\n        'failed_images': 0,\n        'acr_images': 0\n    }\n    is_scanning_by_namespace[namespace] = True\n\n    def add_log(level, message):\n        \"\"\"Add log entry to both console and scan logs\"\"\"\n        log_message(message, level)  # Console logging\n        scan_logs_by_namespace[namespace].append({\n            'timestamp': datetime.now().isoformat(),\n            'level': level,\n            'message': message\n        })\n\n    try:\n        # Authenticate with ACR at the start of scanning\n        try:\n            ensure_acr_authentication()\n            add_log('INFO', '\U0001F510 ACR authentication successful')\n        except Exception as e:\n            add_log('WARNING', f'⚠️ ACR authentication failed: {str(e)}. ACR images may fail to scan.')\n\n        images = get_all_images(namespace)\n        log_message(f\"Images to scan: {images}\")\n        \n        # Count ACR images\n        acr_image_count = sum(1 for img in images if is_acr_image(img))\n        scan_metadata_by_namespace[namespace]['total_images'] = len(images)\n        scan_metadata_by_namespace[namespace]['acr_images'] = acr_image_count\n        \n        if not images:\n            message = f\"No images found in namespace {namespace}\"\n            add_log('WARNING', message)\n            scan_metadata_by_namespace[namespace]['status'] = 'completed'\n            return\n\n        add_log('INFO', f\"Found {len(images)} images to scan in namespace {namespace} ({acr_image_count} ACR images)\")\n\n        for i, image in enumerate(images, 1):\n            log_msg = f\"Scanning image {i}/{len(images)}: {image}\"\n            if is_acr_image(image):\n                log_msg += \" \U0001F510 (ACR)\"\n            \n            add_log('INFO', log_msg)\n            \n            try:\n                result = scan_image_with_trivy(image)\n                \n                log_message(f\"Trivy return code: {result.returncode}\")\n                log_message(f\"Trivy stdout length: {len(result.stdout)}\")\n                log_message(f\"Trivy stderr: {result.stderr}\")\n                \n                if result.returncode != 0:\n                    error_msg = f\"Trivy returned code {result.returncode} for {image}: {result.stderr}\"\n                    add_log('WARNING', error_msg)\n                    scan_metadata_by_namespace[namespace]['failed_images'] += 1\n                    continue\n                \n                if not result.stdout.strip():\n                    add_log('WARNING', f\"Empty scan result for {image}\")\n                    scan_metadata_by_namespace[namespace]['scanned_images'] += 1\n                    continue\n                \n                try:\n                    scan_json = json.loads(result.stdout)\n                    log_message(f\"Parsed JSON keys: {list(scan_json.keys())}\")\n                except json.JSONDecodeError as e:\n                    log_message(f\"JSON decode error: {e}\", \"ERROR\")\n                    log_message(f\"Raw output was: {result.stdout[:500]}...\")\n                    scan_metadata_by_namespace[namespace]['failed_images'] += 1\n                    add_log('ERROR', f\"❌ Invalid JSON response for {image}: {str(e)}\")\n                    continue\n                \n                image_vulnerabilities = []\n                \n                results_list = scan_json.get(\"Results\", [])\n                if not results_list:\n                    log_message(f\"No 'Results' key found in JSON for {image}\")\n                    if \"Vulnerabilities\" in scan_json:\n                        results_list = [scan_json]\n                \n                for target in results_list:\n                    target_name = target.get('Target', 'Unknown')\n                    log_message(f\"Processing target: {target_name}\")\n                    vulns = target.get(\"Vulnerabilities\", [])\n                    log_message(f\"Found {len(vulns) if vulns else 0} vulnerabilities in target {target_name}\")\n                    \n                    if vulns:\n                        for v in vulns:\n                            vuln_data = {\n                                \"id\": v.get(\"VulnerabilityID\", \"N/A\"),\n                                \"pkg\": v.get(\"PkgName\", \"N/A\"),\n                                \"installed\": v.get(\"InstalledVersion\", \"N/A\"),\n                                \"fixed\": v.get(\"FixedVersion\", \"N/A\"),\n                                \"severity\": v.get(\"Severity\", \"UNKNOWN\"),\n                                \"title\": v.get(\"Title\", \"\"),\n                                \"description\": (v.get(\"Description\", \"\")[:200] + \"...\") if len(v.get(\"Description\", \"\")) > 200 else v.get(\"Description\", \"\"),\n                                \"cvss_score\": v.get(\"CVSS\", {}).get(\"nvd\", {}).get(\"V3Score\", 0) if isinstance(v.get(\"CVSS\"), dict) else 0,\n                                \"target\": target_name\n                            }\n                            image_vulnerabilities.append(vuln_data)\n                            log_message(f\"Added vulnerability: {vuln_data['id']} - {vuln_data['severity']}\")\n                \n                log_message(f\"Total vulnerabilities for {image}: {len(image_vulnerabilities)}\")\n                \n                result_data = {\n                    \"image\": image,\n                    \"vulnerabilities\": image_vulnerabilities,\n                    \"scan_time\": datetime.now().isoformat(),\n                    \"status\": \"success\",\n                    \"is_acr\": is_acr_image(image)\n                }\n                scan_results_by_namespace[namespace].append(result_data)\n                log_message(f\"Added result for {image} with {len(image_vulnerabilities)} vulnerabilities\")\n                \n                scan_metadata_by_namespace[namespace]['scanned_images'] += 1\n                success_msg = f\"✅ Completed scanning {image} - Found {len(image_vulnerabilities)} vulnerabilities\"\n                if is_acr_image(image):\n                    success_msg += \" \U0001F510\"\n                \n                add_log('SUCCESS', success_msg)\n                \n            except subprocess.TimeoutExpired:\n                scan_metadata_by_namespace[namespace]['failed_images'] += 1\n                error_msg = f\"❌ Timeout scanning {image} (exceeded 5 minutes)\"\n                add_log('ERROR', error_msg)\n            except Exception as e:\n                scan_metadata_by_namespace[namespace]['failed_images'] += 1\n                error_msg = f\"❌ Unexpected error scanning {image}: {str(e)}\"\n                add_log('ERROR', error_msg)\n    \n    except Exception as e:\n        error_msg = f\"❌ Unexpected error in scan worker: {str(e)}\"\n        add_log('ERROR', error_msg)\n        scan_metadata_by_namespace[namespace]['status'] = 'failed'\n    finally:\n        scan_metadata_by_namespace[namespace]['end_time'] = datetime.now().isoformat()\n        if scan_metadata_by_namespace[namespace]['status'] != 'failed':\n            scan_metadata_by_namespace[namespace]['status'] = 'completed'\n        is_scanning_by_namespace[namespace] = False\n        \n        metadata = scan_metadata_by_namespace[namespace]\n        final_msg = f\"\U0001F3C1 Scan completed! Images: {metadata['scanned_images']}/{metadata['total_images']}, Failed: {metadata['failed_images']}, ACR: {metadata['acr_images']}\"\n        add_log('INFO', final_msg)\n        log_message(f\"Final results count for {namespace}: {len(scan_results_by_namespace[namespace])}\")\n\n# HTML Templates stored as strings\nINDEX_HTML = '''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Trivy Security Scanner</title>\n    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" rel=\"stylesheet\">\n    <style>\n        body { \n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; \n            background: linear-gradient(135deg, #667eea, #764ba2); \n            color: #333; margin: 0; padding: 20px; min-height: 100vh;\n        }\n        .container { max-width: 1200px; margin: 0 auto; }\n        .header { text-align: center; color: white; margin-bottom: 40px; }\n        .header h1 { font-size: 3rem; margin-bottom: 10px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); }\n        .header p { font-size: 1.2rem; opacity: 0.9; }\n        .scan-form { \n            background: white; padding: 30px; border-radius: 15px; margin-bottom: 40px; \n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n        }\n        .form-group { display: flex; gap: 15px; justify-content: center; align-items: center; flex-wrap: wrap; }\n        .form-group input { \n            flex: 1; min-width: 300px; padding: 15px 20px; border: 2px solid #e0e0e0; \n            border-radius: 10px; font-size: 1.1rem; transition: all 0.3s ease;\n        }\n        .form-group input:focus { outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1); }\n        .btn { \n            padding: 15px 30px; background: linear-gradient(45deg, #667eea, #764ba2); \n            color: white; border: none; border-radius: 10px; cursor: pointer; \n            font-size: 1.1rem; font-weight: 600; transition: all 0.3s ease;\n            display: flex; align-items: center; gap: 10px;\n        }\n        .btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4); }\n        .error { background: #fee; color: #c33; padding: 15px; border-radius: 8px; margin-bottom: 20px; border: 1px solid #fcc; }\n        \n        /* Enhanced Filters Section */\n        .filters-section {\n            background: white; border-radius: 15px; padding: 25px; margin-bottom: 25px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2); display: none;\n        }\n        .filters-section.show { display: block; animation: slideIn 0.5s ease; }\n        @keyframes slideIn { from { transform: translateY(-20px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }\n        .filters-header { display: flex; align-items: center; gap: 10px; margin-bottom: 20px; }\n        .filters-header h3 { color: #333; font-size: 1.5rem; margin: 0; }\n        .filter-grid { display: grid; grid-template-columns: repeat(auto-fit, minwidth(200px, 1fr)); gap: 15px; margin-bottom: 20px; }\n        .filter-group { display: flex; flex-direction: column; gap: 8px; }\n        .filter-label { font-weight: 600; color: #555; font-size: 0.9rem; text-transform: uppercase; }\n        .filter-input, .filter-select {\n            padding: 10px 12px; border: 2px solid #e0e0e0; border-radius: 8px;\n            font-size: 0.95rem; transition: all 0.3s ease; background: white;\n        }\n        .filter-input:focus, .filter-select:focus {\n            outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n        }\n        .filter-actions { display: flex; gap: 10px; justify-content: flex-end; flex-wrap: wrap; }\n        .filter-btn {\n            padding: 8px 16px; border: none; border-radius: 6px; cursor: pointer; \n            font-size: 0.9rem; font-weight: 500; transition: all 0.3s ease;\n            display: flex; align-items: center; gap: 8px;\n        }\n        .filter-btn-primary { background: #667eea; color: white; }\n        .filter-btn-secondary { background: #6c757d; color: white; }\n        .filter-btn:hover { transform: translateY(-1px); box-shadow: 0 3px 10px rgba(0,0,0,0.2); }\n        .active-filters { display: flex; gap: 8px; flex-wrap: wrap; margin-top: 15px; }\n        .filter-tag {\n            background: #e9ecef; padding: 4px 10px; border-radius: 16px; font-size: 0.8rem;\n            display: flex; align-items: center; gap: 5px; color: #495057;\n        }\n        .filter-tag .remove { cursor: pointer; color: #dc3545; font-weight: bold; margin-left: 5px; }\n        .filter-tag .remove:hover { color: #c82333; }\n        .results-summary {\n            background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;\n            display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 15px;\n        }\n        .summary-text { font-weight: 500; color: #495057; }\n        .summary-count { background: #667eea; color: white; padding: 4px 12px; border-radius: 12px; font-size: 0.9rem; }\n\n        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }\n        .stat-card {\n            background: white; padding: 25px; border-radius: 12px;\n            box-shadow: 0 5px 20px rgba(0,0,0,0.1); text-align: center; transition: transform 0.3s ease;\n        }\n        .stat-card:hover { transform: translateY(-5px); }\n        .stat-icon {\n            width: 50px; height: 50px; border-radius: 50%; display: flex;\n            align-items: center; justify-content: center; margin: 0 auto 15px;\n            font-size: 1.2rem; color: white;\n        }\n        .stat-critical .stat-icon { background: #dc3545; }\n        .stat-high .stat-icon { background: #fd7e14; }\n        .stat-medium .stat-icon { background: #ffc107; }\n        .stat-low .stat-icon { background: #28a745; }\n        .stat-total .stat-icon { background: #6f42c1; }\n        .stat-value { font-size: 2rem; font-weight: 700; margin-bottom: 5px; }\n        .stat-label { color: #666; font-size: 0.95rem; text-transform: uppercase; font-weight: 600; }\n        .results-section { display: grid; gap: 25px; }\n        .image-card {\n            background: white; border-radius: 12px; box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n            overflow: hidden; transition: transform 0.3s ease;\n        }\n        .image-card:hover { transform: translateY(-2px); }\n        .image-card.hidden { display: none; }\n        .image-header {\n            background: linear-gradient(45deg, #667eea, #764ba2); color: white;\n            padding: 20px; display: flex; justify-content: space-between;\n            align-items: center; flex-wrap: wrap; gap: 15px;\n        }\n        .image-info h3 { font-size: 1.2rem; margin-bottom: 5px; word-break: break-all; }\n        .image-info p { opacity: 0.9; font-size: 0.9rem; }\n        .image-stats { display: flex; gap: 15px; }\n        .image-stat {\n            text-align: center; padding: 8px 12px; background: rgba(255,255,255,0.2);\n            border-radius: 8px;\n        }\n        .image-stat-value { font-size: 1.1rem; font-weight: 700; }\n        .image-stat-label { font-size: 0.7rem; text-transform: uppercase; }\n        .vulnerabilities-table { overflow-x: auto; }\n        .vuln-table { width: 100%; border-collapse: collapse; }\n        .vuln-table th {\n            background: #f8f9fa; padding: 15px; text-align: left; font-weight: 600;\n            border-bottom: 2px solid #dee2e6; position: sticky; top: 0; z-index: 10;\n        }\n        .vuln-table td { padding: 12px 15px; border-bottom: 1px solid #dee2e6; vertical-align: top; }\n        .vuln-table tr:hover { background: #f8f9fa; }\n        .vuln-table tr.hidden { display: none; }\n        .severity-badge {\n            padding: 4px 8px; border-radius: 12px; font-size: 0.75rem;\n            font-weight: 600; text-transform: uppercase; white-space: nowrap;\n        }\n        .severity-CRITICAL { background: #dc3545; color: white; }\n        .severity-HIGH { background: #fd7e14; color: white; }\n        .severity-MEDIUM { background: #ffc107; color: #212529; }\n        .severity-LOW { background: #28a745; color: white; }\n        .severity-UNKNOWN { background: #6c757d; color: white; }\n        .vuln-id {\n            font-family: monospace; background: #f8f9fa; padding: 2px 6px;\n            border-radius: 4px; font-size: 0.85rem;\n        }\n        .package-info { font-family: monospace; font-size: 0.9rem; }\n        .version-badge {\n            background: #e9ecef; padding: 2px 6px; border-radius: 4px;\n            font-size: 0.8rem; margin: 2px; display: inline-block;\n        }\n        .fixed-version { background: #d1ecf1; color: #0c5460; }\n        .vuln-title { font-weight: 500; line-height: 1.3; }\n        .no-results {\n            background: white; border-radius: 12px; padding: 60px 40px;\n            text-align: center; box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n        }\n        .no-results i { font-size: 4rem; color: #28a745; margin-bottom: 20px; }\n        .no-results h3 { font-size: 1.5rem; margin-bottom: 10px; color: #333; }\n        .no-results p { color: #666; font-size: 1.1rem; }\n        .expand-btn {\n            background: none; border: none; color: #007bff; cursor: pointer;\n            font-size: 0.8rem; padding: 2px 5px;\n        }\n        .expand-btn:hover { text-decoration: underline; }\n        .description-full {\n            display: none; margin-top: 8px; font-size: 0.85rem;\n            color: #666; line-height: 1.4;\n        }\n        .description-full.show { display: block; }\n        @media (max-width: 768px) {\n            .container { padding: 10px; }\n            .header { flex-direction: column; text-align: center; }\n            .filter-grid { grid-template-columns: 1fr; }\n            .filter-actions { flex-direction: column; }\n            .stats-grid { grid-template-columns: repeat(2, 1fr); }\n            .image-header { flex-direction: column; text-align: center; }\n            .image-stats { justify-content: center; }\n            .vuln-table { font-size: 0.85rem; }\n            .vuln-table th, .vuln-table td { padding: 8px; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <div class=\"header-left\">\n                <div class=\"namespace-icon\"><i class=\"fas fa-cube\"></i></div>\n                <div class=\"header-info\">\n                    <h1>{{ namespace }}</h1>\n                    <p>Security Scan Results</p>\n                </div>\n            </div>\n            <div class=\"header-right\">\n                <button onclick=\"exportResults()\" class=\"btn btn-warning\">\n                    <i class=\"fas fa-download\"></i> Export JSON\n                </button>\n                <a href=\"/scan/{{ namespace }}\" class=\"btn btn-primary\">\n                    <i class=\"fas fa-redo\"></i> Rescan\n                </a>\n                <a href=\"/\" class=\"btn btn-secondary\">\n                    <i class=\"fas fa-home\"></i> Home\n                </a>\n            </div>\n        </div>\n\n        <div class=\"filters-section\">\n            <div class=\"filters-header\">\n                <h3><i class=\"fas fa-filter\"></i> Vulnerability Filters</h3>\n                <button class=\"filter-toggle\" onclick=\"toggleFilters()\">\n                    <i class=\"fas fa-chevron-down\" id=\"filterToggleIcon\"></i> Show/Hide\n                </button>\n            </div>\n            <div class=\"filter-content\" id=\"filterContent\">\n                <div class=\"filter-grid\">\n                    <div class=\"filter-group\">\n                        <label class=\"filter-label\">Severity Level</label>\n                        <select id=\"severityFilter\" class=\"filter-select\">\n                            <option value=\"\">All Severities</option>\n                            <option value=\"CRITICAL\">Critical</option>\n                            <option value=\"HIGH\">High</option>\n                            <option value=\"MEDIUM\">Medium</option>\n                            <option value=\"LOW\">Low</option>\n                            <option value=\"UNKNOWN\">Unknown</option>\n                        </select>\n                    </div>\n                    <div class=\"filter-group\">\n                        <label class=\"filter-label\">Package Name</label>\n                        <input type=\"text\" id=\"packageFilter\" class=\"filter-input\" placeholder=\"Filter by package...\">\n                    </div>\n                    <div class=\"filter-group\">\n                        <label class=\"filter-label\">Vulnerability ID</label>\n                        <input type=\"text\" id=\"vulnIdFilter\" class=\"filter-input\" placeholder=\"CVE-2023-xxxx\">\n                    </div>\n                    <div class=\"filter-group\">\n                        <label class=\"filter-label\">Image Name</label>\n                        <input type=\"text\" id=\"imageFilter\" class=\"filter-input\" placeholder=\"Filter by image...\">\n                    </div>\n                    <div class=\"filter-group\">\n                        <label class=\"filter-label\">Fix Available</label>\n                        <select id=\"fixFilter\" class=\"filter-select\">\n                            <option value=\"\">All</option>\n                            <option value=\"yes\">Has Fix</option>\n                            <option value=\"no\">No Fix</option>\n                        </select>\n                    </div>\n                    <div class=\"filter-group\">\n                        <label class=\"filter-label\">CVSS Score</label>\n                        <input type=\"number\" id=\"cvssFilter\" class=\"filter-input\" placeholder=\"Min CVSS score...\" min=\"0\" max=\"10\" step=\"0.1\">\n                    </div>\n                </div>\n                <div class=\"filter-actions\">\n                    <button onclick=\"clearAllFilters()\" class=\"filter-btn filter-btn-secondary\">\n                        <i class=\"fas fa-times\"></i> Clear All\n                    </button>\n                    <button onclick=\"applyFilters()\" class=\"filter-btn filter-btn-primary\">\n                        <i class=\"fas fa-search\"></i> Apply Filters\n                    </button>\n                </div>\n                <div class=\"active-filters\" id=\"activeFilters\"></div>\n                <div class=\"results-summary\" id=\"resultsSummary\">\n                    <span class=\"summary-text\">Showing all vulnerabilities</span>\n                    <span class=\"summary-count\" id=\"summaryCount\">{{ total_vulnerabilities }} total</span>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"stats-grid\">\n            <div class=\"stat-card stat-total\">\n                <div class=\"stat-icon\"><i class=\"fas fa-bug\"></i></div>\n                <div class=\"stat-value\" id=\"totalVulnCount\">{{ total_vulnerabilities }}</div>\n                <div class=\"stat-label\">Total Vulnerabilities</div>\n            </div>\n            <div class=\"stat-card stat-critical\">\n                <div class=\"stat-icon\"><i class=\"fas fa-exclamation-triangle\"></i></div>\n                <div class=\"stat-value\" id=\"criticalCount\">{{ stats.CRITICAL }}</div>\n                <div class=\"stat-label\">Critical</div>\n            </div>\n            <div class=\"stat-card stat-high\">\n                <div class=\"stat-icon\"><i class=\"fas fa-exclamation\"></i></div>\n                <div class=\"stat-value\" id=\"highCount\">{{ stats.HIGH }}</div>\n                <div class=\"stat-label\">High</div>\n            </div>\n            <div class=\"stat-card stat-medium\">\n                <div class=\"stat-icon\"><i class=\"fas fa-minus-circle\"></i></div>\n                <div class=\"stat-value\" id=\"mediumCount\">{{ stats.MEDIUM }}</div>\n                <div class=\"stat-label\">Medium</div>\n            </div>\n            <div class=\"stat-card stat-low\">\n                <div class=\"stat-icon\"><i class=\"fas fa-info-circle\"></i></div>\n                <div class=\"stat-value\" id=\"lowCount\">{{ stats.LOW }}</div>\n                <div class=\"stat-label\">Low</div>\n            </div>\n        </div>\n\n        {% if results %}\n        <div class=\"results-section\" id=\"resultsSection\">\n            {% for result in results %}\n            <div class=\"image-card\" data-image=\"{{ result.image }}\">\n                <div class=\"image-header\">\n                    <div class=\"image-info\">\n                        <h3>{{ result.image }}</h3>\n                        <p><i class=\"fas fa-clock\"></i> Scanned: {{ result.scan_time[:19].replace('T', ' ') }}</p>\n                    </div>\n                    <div class=\"image-stats\">\n                        {% set image_stats = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0} %}\n                        {% for vuln in result.vulnerabilities %}\n                            {% set _ = image_stats.update({vuln.severity: image_stats.get(vuln.severity, 0) + 1}) %}\n                        {% endfor %}\n                        \n                        <div class=\"image-stat\">\n                            <div class=\"image-stat-value\">{{ image_stats.CRITICAL }}</div>\n                            <div class=\"image-stat-label\">Critical</div>\n                        </div>\n                        <div class=\"image-stat\">\n                            <div class=\"image-stat-value\">{{ image_stats.HIGH }}</div>\n                            <div class=\"image-stat-label\">High</div>\n                        </div>\n                        <div class=\"image-stat\">\n                            <div class=\"image-stat-value\">{{ image_stats.MEDIUM }}</div>\n                            <div class=\"image-stat-label\">Medium</div>\n                        </div>\n                        <div class=\"image-stat\">\n                            <div class=\"image-stat-value\">{{ image_stats.LOW }}</div>\n                            <div class=\"image-stat-label\">Low</div>\n                        </div>\n                    </div>\n                </div>\n\n                {% if result.vulnerabilities %}\n                <div class=\"vulnerabilities-table\">\n                    <table class=\"vuln-table\">\n                        <thead>\n                            <tr>\n                                <th>Vulnerability ID</th>\n                                <th>Severity</th>\n                                <th>Package</th>\n                                <th>Installed Version</th>\n                                <th>Fixed Version</th>\n                                <th>CVSS Score</th>\n                                <th>Title</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {% for vuln in result.vulnerabilities %}\n                            <tr class=\"vuln-row\" \n                                data-severity=\"{{ vuln.severity }}\" \n                                data-package=\"{{ vuln.pkg }}\" \n                                data-vuln-id=\"{{ vuln.id }}\"\n                                data-image=\"{{ result.image }}\"\n                                data-has-fix=\"{{ 'yes' if vuln.fixed else 'no' }}\"\n                                data-cvss=\"{{ vuln.cvss_score or 0 }}\">\n                                <td><div class=\"vuln-id\">{{ vuln.id }}</div></td>\n                                <td><span class=\"severity-badge severity-{{ vuln.severity }}\">{{ vuln.severity }}</span></td>\n                                <td>\n                                    <div class=\"package-info\">{{ vuln.pkg }}</div>\n                                    {% if vuln.target %}\n                                    <small style=\"color: #666;\">{{ vuln.target }}</small>\n                                    {% endif %}\n                                </td>\n                                <td><span class=\"version-badge\">{{ vuln.installed or 'N/A' }}</span></td>\n                                <td>\n                                    {% if vuln.fixed %}\n                                    <span class=\"version-badge fixed-version\">{{ vuln.fixed }}</span>\n                                    {% else %}\n                                    <span style=\"color: #dc3545; font-size: 0.8rem;\">Not Fixed</span>\n                                    {% endif %}\n                                </td>\n                                <td>\n                                    {% if vuln.cvss_score %}\n                                    <div style=\"display: inline-flex; align-items: center; gap: 5px; font-size: 0.8rem; color: #666;\">\n                                        <i class=\"fas fa-chart-line\"></i>\n                                        {{ \"%.1f\"|format(vuln.cvss_score) }}\n                                    </div>\n                                    {% else %}\n                                    <span style=\"color: #666;\">N/A</span>\n                                    {% endif %}\n                                </td>\n                                <td>\n                                    <div class=\"vuln-title\">{{ vuln.title or 'No title available' }}</div>\n                                    {% if vuln.description %}\n                                    <button class=\"expand-btn\" onclick=\"toggleDescription(this)\">Show Description</button>\n                                    <div class=\"description-full\">{{ vuln.description }}</div>\n                                    {% endif %}\n                                </td>\n                            </tr>\n                            {% endfor %}\n                        </tbody>\n                    </table>\n                </div>\n                {% else %}\n                <div style=\"padding: 20px; text-align: center; color: #28a745;\">\n                    <i class=\"fas fa-shield-alt\" style=\"font-size: 2rem; margin-bottom: 10px;\"></i>\n                    <p>✅ No vulnerabilities found in this image!</p>\n                </div>\n                {% endif %}\n            </div>\n            {% endfor %}\n        </div>\n        {% else %}\n        <div class=\"no-results\">\n            <i class=\"fas fa-shield-alt\"></i>\n            <h3>No Vulnerabilities Found!</h3>\n            <p>Great news! No security vulnerabilities were detected in the scanned images for namespace <strong>{{ namespace }}</strong>.</p>\n        </div>\n        {% endif %}\n\n        {% if results %}\n        <div style=\"margin-top: 20px; text-align: center;\">\n            <p style=\"color: white; opacity: 0.8;\">\n                <i class=\"fas fa-info-circle\"></i>\n                Showing results for {{ results|length }} image(s) with <span id=\"visibleVulnCount\">{{ total_vulnerabilities }}</span> vulnerabilities\n            </p>\n        </div>\n        {% endif %}\n    </div>\n\n    <script>\n        let currentFilters = { severity: '', package: '', vulnId: '', image: '', fix: '', cvss: '' };\n        let filterExpanded = true;\n\n        function toggleFilters() {\n            const content = document.getElementById('filterContent');\n            const icon = document.getElementById('filterToggleIcon');\n            \n            filterExpanded = !filterExpanded;\n            content.style.display = filterExpanded ? 'block' : 'none';\n            icon.className = filterExpanded ? 'fas fa-chevron-up' : 'fas fa-chevron-down';\n        }\n\n        function applyFilters() {\n            currentFilters = {\n                severity: document.getElementById('severityFilter').value,\n                package: document.getElementById('packageFilter').value.toLowerCase().trim(),\n                vulnId: document.getElementById('vulnIdFilter').value.toLowerCase().trim(),\n                image: document.getElementById('imageFilter').value.toLowerCase().trim(),\n                fix: document.getElementById('fixFilter').value,\n                cvss: document.getElementById('cvssFilter').value\n            };\n\n            let visibleVulns = 0;\n            let stats = { CRITICAL: 0, HIGH: 0, MEDIUM: 0, LOW: 0, UNKNOWN: 0 };\n            \n            const vulnRows = document.querySelectorAll('.vuln-row');\n            vulnRows.forEach(row => {\n                let shouldShow = true;\n\n                if (currentFilters.severity && row.dataset.severity !== currentFilters.severity) shouldShow = false;\n                if (currentFilters.package && !row.dataset.package.toLowerCase().includes(currentFilters.package)) shouldShow = false;\n                if (currentFilters.vulnId && !row.dataset.vulnId.toLowerCase().includes(currentFilters.vulnId)) shouldShow = false;\n                if (currentFilters.image && !row.dataset.image.toLowerCase().includes(currentFilters.image)) shouldShow = false;\n                if (currentFilters.fix && row.dataset.hasFix !== currentFilters.fix) shouldShow = false;\n\n                if (currentFilters.cvss) {\n                    const cvssScore = parseFloat(row.dataset.cvss) || 0;\n                    if (cvssScore < parseFloat(currentFilters.cvss)) shouldShow = false;\n                }\n\n                if (shouldShow) {\n                    row.classList.remove('hidden');\n                    visibleVulns++;\n                    stats[row.dataset.severity] = (stats[row.dataset.severity] || 0) + 1;\n                } else {\n                    row.classList.add('hidden');\n                }\n            });\n\n            const imageCards = document.querySelectorAll('.image-card');\n            imageCards.forEach(card => {\n                const visibleRows = card.querySelectorAll('.vuln-row:not(.hidden)');\n                if (visibleRows.length === 0 && card.querySelector('.vuln-row')) {\n                    card.classList.add('hidden');\n                } else {\n                    card.classList.remove('hidden');\n                }\n            });\n\n            updateStatCounts(stats, visibleVulns);\n            updateActiveFilters();\n            updateResultsSummary(visibleVulns);\n        }\n\n        function clearAllFilters() {\n            document.getElementById('severityFilter').value = '';\n            document.getElementById('packageFilter').value = '';\n            document.getElementById('vulnIdFilter').value = '';\n            document.getElementById('imageFilter').value = '';\n            document.getElementById('fixFilter').value = '';\n            document.getElementById('cvssFilter').value = '';\n            \n            currentFilters = { severity: '', package: '', vulnId: '', image: '', fix: '', cvss: '' };\n\n            document.querySelectorAll('.vuln-row').forEach(row => row.classList.remove('hidden'));\n            document.querySelectorAll('.image-card').forEach(card => card.classList.remove('hidden'));\n\n            const originalStats = { CRITICAL: {{ stats.CRITICAL }}, HIGH: {{ stats.HIGH }}, MEDIUM: {{ stats.MEDIUM }}, LOW: {{ stats.LOW }}, UNKNOWN: {{ stats.UNKNOWN or 0 }} };\n            updateStatCounts(originalStats, {{ total_vulnerabilities }});\n            updateActiveFilters();\n            updateResultsSummary({{ total_vulnerabilities }});\n        }\n\n        function updateStatCounts(stats, totalVulns) {\n            document.getElementById('totalVulnCount').textContent = totalVulns;\n            document.getElementById('criticalCount').textContent = stats.CRITICAL || 0;\n            document.getElementById('highCount').textContent = stats.HIGH || 0;\n            document.getElementById('mediumCount').textContent = stats.MEDIUM || 0;\n            document.getElementById('lowCount').textContent = stats.LOW || 0;\n            document.getElementById('visibleVulnCount').textContent = totalVulns;\n        }\n\n        function updateActiveFilters() {\n            const activeFiltersContainer = document.getElementById('activeFilters');\n            activeFiltersContainer.innerHTML = '';\n\n            Object.keys(currentFilters).forEach(key => {\n                const value = currentFilters[key];\n                if (value) {\n                    const tag = document.createElement('div');\n                    tag.className = 'filter-tag';\n                    tag.innerHTML = `<span>${key}: ${value}</span><span class=\"remove\" onclick=\"removeFilter('${key}')\">&times;</span>`;\n                    activeFiltersContainer.appendChild(tag);\n                }\n            });\n        }\n\n        function updateResultsSummary(visibleCount) {\n            const summaryText = document.querySelector('.summary-text');\n            const summaryCount = document.getElementById('summaryCount');\n            \n            const totalCount = {{ total_vulnerabilities }};\n            summaryText.textContent = visibleCount === totalCount ? 'Showing all vulnerabilities' : 'Showing filtered vulnerabilities';\n            summaryCount.textContent = `${visibleCount} of ${totalCount}`;\n        }\n\n        function removeFilter(filterKey) {\n            const filterMap = {\n                severity: 'severityFilter', package: 'packageFilter', vulnId: 'vulnIdFilter',\n                image: 'imageFilter', fix: 'fixFilter', cvss: 'cvssFilter'\n            };\n            document.getElementById(filterMap[filterKey]).value = '';\n            applyFilters();\n        }\n\n        function toggleDescription(button) {\n            const description = button.nextElementSibling;\n            const isShowing = description.classList.contains('show');\n            \n            description.classList.toggle('show', !isShowing);\n            button.textContent = isShowing ? 'Show Description' : 'Hide Description';\n        }\n\n        function exportResults() {\n            fetch(`/api/results/{{ namespace }}`)\n                .then(response => response.json())\n                .then(data => {\n                    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n                    const url = URL.createObjectURL(blob);\n                    const a = document.createElement('a');\n                    a.href = url;\n                    a.download = `trivy-scan-{{ namespace }}-${new Date().toISOString().split('T')[0]}.json`;\n                    document.body.appendChild(a);\n                    a.click();\n                    document.body.removeChild(a);\n                    URL.revokeObjectURL(url);\n                })\n                .catch(error => {\n                    console.error('Export failed:', error);\n                    alert('Failed to export results');\n                });\n        }\n\n        ['severityFilter', 'packageFilter', 'vulnIdFilter', 'imageFilter', 'fixFilter', 'cvssFilter'].forEach(id => {\n            document.getElementById(id).addEventListener(id.includes('Filter') && !id.includes('Filter') ? 'change' : 'input', applyFilters);\n        });\n\n        console.log('Enhanced Trivy Results interface loaded with advanced filtering capabilities');\n    </script>\n</body>\n</html>\n'''\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"POST\":\n        namespace = request.form[\"namespace\"].strip()\n        if not namespace:\n            return render_template_string(INDEX_HTML, \n                                       namespaces=list(scan_results_by_namespace.keys()),\n                                       error=\"Please enter a valid namespace\")\n        \n        if namespace not in is_scanning_by_namespace or not is_scanning_by_namespace[namespace]:\n            threading.Thread(target=scan_worker, args=(namespace,), daemon=True).start()\n        return redirect(url_for(\"scan\", namespace=namespace))\n\n    scan_history = []\n    for ns in scan_results_by_namespace.keys():\n        metadata = scan_metadata_by_namespace.get(ns, {})\n        results = scan_results_by_namespace.get(ns, [])\n        stats, total_vulns = get_vulnerability_stats(results)\n        \n        scan_history.append({\n            'namespace': ns,\n            'metadata': metadata,\n            'stats': stats,\n            'total_vulnerabilities': total_vulns,\n            'is_scanning': is_scanning_by_namespace.get(ns, False)\n        })\n\n    return render_template_string(INDEX_HTML, scan_history=scan_history)\n\n@app.route(\"/scan/<namespace>\")\ndef scan(namespace):\n    metadata = scan_metadata_by_namespace.get(namespace, {})\n    return render_template_string(SCAN_HTML, \n                               namespace=namespace, \n                               scanning=is_scanning_by_namespace.get(namespace, False),\n                               metadata=metadata)\n\n@app.route(\"/logs/<namespace>\")\ndef stream_logs(namespace):\n    def generate():\n        last_index = 0\n        while is_scanning_by_namespace.get(namespace, False) or last_index < len(scan_logs_by_namespace.get(namespace, [])):\n            logs = scan_logs_by_namespace.get(namespace, [])\n            new_logs = logs[last_index:]\n            for log in new_logs:\n                yield f\"data: {json.dumps(log)}\\n\\n\"\n            last_index = len(logs)\n            time.sleep(0.5)\n        \n        yield f\"data: {json.dumps({'type': 'complete'})}\\n\\n\"\n\n    return Response(generate(), mimetype=\"text/event-stream\")\n\n@app.route(\"/api/scan-status/<namespace>\")\ndef scan_status(namespace):\n    \"\"\"API endpoint for scan status\"\"\"\n    return jsonify({\n        'scanning': is_scanning_by_namespace.get(namespace, False),\n        'metadata': scan_metadata_by_namespace.get(namespace, {}),\n        'log_count': len(scan_logs_by_namespace.get(namespace, []))\n    })\n\n@app.route(\"/results/<namespace>\")\ndef results(namespace):\n    results = scan_results_by_namespace.get(namespace, [])\n    metadata = scan_metadata_by_namespace.get(namespace, {})\n    stats, total_vulns = get_vulnerability_stats(results)\n    \n    return render_template_string(RESULTS_HTML, \n                               namespace=namespace, \n                               results=results,\n                               metadata=metadata,\n                               stats=stats,\n                               total_vulnerabilities=total_vulns)\n\n@app.route(\"/api/results/<namespace>\")\ndef api_results(namespace):\n    \"\"\"API endpoint for results data with filtering\"\"\"\n    results = scan_results_by_namespace.get(namespace, [])\n    stats, total_vulns = get_vulnerability_stats(results)\n    \n    # Apply filters if provided\n    severity_filter = request.args.get('severity')\n    if severity_filter:\n        filtered_results = []\n        for result in results:\n            filtered_vulns = [v for v in result.get('vulnerabilities', []) \n                            if v.get('severity') == severity_filter]\n            if filtered_vulns:\n                result_copy = result.copy()\n                result_copy['vulnerabilities'] = filtered_vulns\n                filtered_results.append(result_copy)\n        results = filtered_results\n    \n    return jsonify({\n        'results': results,\n        'stats': stats,\n        'total_vulnerabilities': total_vulns,\n        'metadata': scan_metadata_by_namespace.get(namespace, {})\n    })\n\n@app.route(\"/debug/<namespace>\")\ndef debug_namespace(namespace):\n    \"\"\"Debug endpoint to diagnose issues\"\"\"\n    try:\n        images = get_all_images(namespace)\n        acr_images = [img for img in images if is_acr_image(img)]\n        pods = v1.list_namespaced_pod(namespace)\n        pod_info = []\n        \n        for pod in pods.items:\n            pod_data = {\n                'name': pod.metadata.name,\n                'status': pod.status.phase,\n                'containers': []\n            }\n            for container in pod.spec.containers:\n                pod_data['containers'].append({\n                    'name': container.name,\n                    'image': container.image,\n                    'is_acr': is_acr_image(container.image)\n                })\n            pod_info.append(pod_data)\n        \n        trivy_test = {}\n        if images:\n            test_image = images[0]\n            try:\n                result = scan_image_with_trivy(test_image)\n                trivy_test = {\n                    'test_image': test_image,\n                    'is_acr': is_acr_image(test_image),\n                    'return_code': result.returncode,\n                    'stdout_length': len(result.stdout),\n                    'stderr': result.stderr,\n                    'has_output': bool(result.stdout.strip())\n                }\n                \n                if result.stdout:\n                    try:\n                        scan_json = json.loads(result.stdout)\n                        trivy_test['json_keys'] = list(scan_json.keys())\n                        trivy_test['results_count'] = len(scan_json.get('Results', []))\n                    except json.JSONDecodeError:\n                        trivy_test['json_error'] = 'Invalid JSON'\n                        \n            except Exception as e:\n                trivy_test['error'] = str(e)\n        \n        return jsonify({\n            'namespace': namespace,\n            'images_from_function': images,\n            'image_count': len(images),\n            'acr_images': acr_images,\n            'acr_count': len(acr_images),\n            'pod_count': len(pods.items),\n            'pod_details': pod_info,\n            'trivy_test': trivy_test,\n            'acr_config': {\n                'registry_name': ACR_REGISTRY_NAME,\n                'has_credentials': bool(ACR_CLIENT_ID and ACR_CLIENT_SECRET and ACR_TENANT_ID),\n                'token_valid': is_acr_token_valid()\n            }\n        })\n    except Exception as e:\n        return jsonify({'error': str(e), 'error_type': type(e).__name__})\n\n@app.route(\"/test-trivy\")\ndef test_trivy():\n    \"\"\"Test trivy installation and basic functionality\"\"\"\n    try:\n        version_result = subprocess.run(\n            [\"trivy\", \"--version\"],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            timeout=10\n        )\n        \n        test_result = subprocess.run(\n            [\"trivy\", \"image\", \"--format\", \"json\", \"alpine:latest\"],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            timeout=60\n        )\n        \n        return jsonify({\n            'trivy_version': {\n                'return_code': version_result.returncode,\n                'stdout': version_result.stdout,\n                'stderr': version_result.stderr\n            },\n            'trivy_test': {\n                'return_code': test_result.returncode,\n                'stdout_length': len(test_result.stdout),\n                'stderr': test_result.stderr,\n                'has_json_output': bool(test_result.stdout.strip())\n            },\n            'acr_status': {\n                'authenticated': is_acr_token_valid(),\n                'registry': ACR_REGISTRY_NAME,\n                'has_config': bool(ACR_CLIENT_ID and ACR_CLIENT_SECRET and ACR_TENANT_ID)\n            }\n        })\n    except Exception as e:\n        return jsonify({'error': str(e)})\n\n@app.route(\"/test-acr\")\ndef test_acr():\n    \"\"\"Test ACR authentication\"\"\"\n    try:\n        authenticate_with_acr()\n        return jsonify({\n            'status': 'success',\n            'message': 'ACR authentication successful',\n            'registry': ACR_REGISTRY_NAME,\n            'token_valid': is_acr_token_valid()\n        })\n    except Exception as e:\n        return jsonify({\n            'status': 'error',\n            'message': str(e),\n            'registry': ACR_REGISTRY_NAME,\n            'has_config': bool(ACR_CLIENT_ID and ACR_CLIENT_SECRET and ACR_TENANT_ID)\n        })\n\n@app.route(\"/health\")\ndef health():\n    return jsonify({\n        \"status\": \"healthy\", \n        \"timestamp\": datetime.now().isoformat(),\n        \"acr_authenticated\": is_acr_token_valid()\n    })\n\nif __name__ == \"__main__\":\n    log_message(\"\U0001F680 Starting Enhanced Trivy UI Application with ACR Support\")\n    log_message(\"\U0001F4CA Debug endpoints available:\")\n    log_message(\"   - /debug/<namespace> - Debug namespace scanning\")\n    log_message(\"   - /test-trivy - Test Trivy installation\")\n    log_message(\"   - /test-acr - Test ACR authentication\")\n    log_message(\"\U0001F510 ACR Configuration:\")\n    log_message(f\"   - Registry: {ACR_REGISTRY_NAME}\")\n    log_message(f\"   - Has credentials: {bool(ACR_CLIENT_ID and ACR_CLIENT_SECRET and ACR_TENANT_ID)}\")\n    \n    # Test ACR authentication on startup\n    if ACR_CLIENT_ID and ACR_CLIENT_SECRET and ACR_TENANT_ID:\n        try:\n            authenticate_with_acr()\n            log_message(\"✅ Initial ACR authentication successful\")\n        except Exception as e:\n            log_message(f\"⚠️ Initial ACR authentication failed: {e}\", \"WARNING\")\n    else:\n        log_message(\"⚠️ ACR credentials not configured - ACR images will fail to scan\", \"WARNING\")\n    \n    app.run(debug=True, threaded=True, host='0.0.0.0', port=5000)\n"
  requirements.txt: |
    kubernetes==28.1.0
    Flask==2.0.3
    Werkzeug==2.0.3 }
            .filter-label { font-weight: 600; color: #555; font-size: 0.9rem; text-transform: uppercase; }
            .filter-input, .filter-select {
                padding: 12px 15px; border: 2px solid #e0e0e0; border-radius: 8px;
                font-size: 1rem; transition: all 0.3s ease; background: white;
            }
            .filter-input:focus, .filter-select:focus {
                outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }
            .filter-actions { display: flex; gap: 10px; justify-content: flex-end; }
            .filter-btn {
                padding: 10px 20px; border: none; border-radius: 8px; cursor: pointer; 
                font-size: 1rem; font-weight: 500; transition: all 0.3s ease;
                display: flex; align-items: center; gap: 8px;
            }
            .filter-btn-primary { background: #667eea; color: white; }
            .filter-btn-secondary { background: #6c757d; color: white; }
            .filter-btn:hover { transform: translateY(-1px); box-shadow: 0 3px 10px rgba(0,0,0,0.2); }
            .active-filters { display: flex; gap: 10px; flex-wrap: wrap; margin-top: 15px; }
            .filter-tag {
                background: #e9ecef; padding: 5px 12px; border-radius: 20px; font-size: 0.85rem;
                display: flex; align-items: center; gap: 5px; color: #495057;
            }
            .filter-tag .remove { cursor: pointer; color: #dc3545; font-weight: bold; }
            .filter-tag .remove:hover { color: #c82333; }
            
            .history { 
                background: white; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); 
                overflow: hidden;
            }
            .history-header { 
                background: linear-gradient(45deg, #667eea, #764ba2); color: white; 
                padding: 25px; text-align: center;
            }
            .history-header h2 { font-size: 1.8rem; margin-bottom: 5px; }
            .history-grid { display: grid; gap: 20px; padding: 25px; }
            .history-card { 
                background: #f8f9fa; border-radius: 12px; padding: 20px; 
                border: 1px solid #e9ecef; transition: all 0.3s ease;
            }
            .history-card:hover { transform: translateY(-2px); box-shadow: 0 5px 20px rgba(0,0,0,0.1); }
            .history-card.hidden { display: none; }
            .card-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }
            .namespace-name { 
                font-size: 1.3rem; font-weight: 600; color: #333; 
                display: flex; align-items: center; gap: 10px;
            }
            .status-badge { 
                padding: 5px 12px; border-radius: 20px; font-size: 0.85rem; 
                font-weight: 600; text-transform: uppercase;
            }
            .status-scanning { background: #fff3cd; color: #856404; }
            .status-completed { background: #d4edda; color: #155724; }
            .status-failed { background: #f8d7da; color: #721c24; }
            .vuln-stats { 
                display: grid; grid-template-columns: repeat(auto-fit, minmax(80px, 1fr)); 
                gap: 10px; margin-bottom: 15px;
            }
            .vuln-stat { text-align: center; padding: 10px; border-radius: 8px; font-weight: 600; }
            .critical { background: #dc3545; color: white; }
            .high { background: #fd7e14; color: white; }
            .medium { background: #ffc107; color: #212529; }
            .low { background: #28a745; color: white; }
            .unknown { background: #6c757d; color: white; }
            .card-actions { display: flex; gap: 10px; justify-content: flex-end; }
            .btn-small { 
                padding: 8px 16px; font-size: 0.9rem; border-radius: 6px; 
                text-decoration: none; color: white; background: #6c757d; 
                transition: all 0.2s ease;
            }
            .btn-primary { background: #007bff; }
            .btn-success { background: #28a745; }
            .btn-small:hover { transform: translateY(-1px); opacity: 0.9; }
            .metadata-info { font-size: 0.9rem; color: #666; margin-top: 10px; }
            .empty-state { text-align: center; padding: 60px 20px; color: #666; }
            .empty-state i { font-size: 4rem; margin-bottom: 20px; opacity: 0.5; }
            .scanning-indicator { display: inline-flex; align-items: center; gap: 8px; }
            .spinner { 
                width: 16px; height: 16px; border: 2px solid #f3f3f3; 
                border-top: 2px solid #856404; border-radius: 50%; 
                animation: spin 1s linear infinite;
            }
            @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
            .results-summary { 
                background: #f8f9fa; padding: 15px; border-radius: 8px; margin-top: 10px;
                border-left: 4px solid #667eea;
            }
            .results-summary-text { font-size: 0.9rem; color: #555; }
            @media (max-width: 768px) {
                .container { padding: 10px; }
                .header h1 { font-size: 2rem; }
                .form-group { flex-direction: column; }
                .form-group input { min-width: auto; width: 100%; }
                .filter-grid { grid-template-columns: 1fr; }
                .filter-actions { flex-direction: column; }
                .vuln-stats { grid-template-columns: repeat(5, 1fr); gap: 5px; }
                .vuln-stat { padding: 8px 4px; font-size: 0.8rem; }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1><i class="fas fa-shield-alt"></i> Trivy Security Scanner</h1>
                <p>Kubernetes Container Vulnerability Assessment</p>
            </div>
            
            <div class="scan-form">
                <form method="POST">
                    {% if error %}
                    <div class="error">
                        <i class="fas fa-exclamation-triangle"></i> {{ error }}
                    </div>
                    {% endif %}
                    <div class="form-group">
                        <input name="namespace" placeholder="Enter Kubernetes Namespace" required />
                        <button type="submit" class="btn">
                            <i class="fas fa-search"></i> Start Scan
                        </button>
                    </div>
                </form>
            </div>

            <!-- Enhanced Filters Section -->
            <div class="filters-section" id="filtersSection">
                <div class="filters-header">
                    <h3><i class="fas fa-filter"></i> Filters</h3>
                </div>
                <div class="filter-grid">
                    <div class="filter-group">
                        <label class="filter-label">Namespace</label>
                        <input type="text" id="namespaceFilter" class="filter-input" placeholder="Filter by namespace...">
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Vulnerability Level</label>
                        <select id="severityFilter" class="filter-select">
                            <option value="">All Severities</option>
                            <option value="CRITICAL">Critical</option>
                            <option value="HIGH">High</option>
                            <option value="MEDIUM">Medium</option>
                            <option value="LOW">Low</option>
                            <option value="UNKNOWN">Unknown</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Status</label>
                        <select id="statusFilter" class="filter-select">
                            <option value="">All Statuses</option>
                            <option value="scanning">Scanning</option>
                            <option value="completed">Completed</option>
                            <option value="failed">Failed</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label class="filter-label">Minimum Vulnerabilities</label>
                        <input type="number" id="minVulnsFilter" class="filter-input" placeholder="Min count..." min="0">
                    </div>
                </div>
                <div class="filter-actions">
                    <button onclick="clearFilters()" class="filter-btn filter-btn-secondary">
                        <i class="fas fa-times"></i> Clear Filters
                    </button>
                    <button onclick="applyFilters()" class="filter-btn filter-btn-primary">
                        <i class="fas fa-search"></i> Apply Filters
                    </button>
                </div>
                <div class="active-filters" id="activeFilters"></div>
            </div>

            {% if scan_history %}
            <div class="history">
                <div class="history-header">
                    <h2><i class="fas fa-history"></i> Scan History</h2>
                    <p>View and manage your security scans</p>
                </div>
                <div class="history-grid" id="historyGrid">
                    {% for scan in scan_history %}
                    <div class="history-card" 
                         data-namespace="{{ scan.namespace }}" 
                         data-status="{{ scan.metadata.get('status', 'unknown') }}"
                         data-critical="{{ scan.stats.CRITICAL }}"
                         data-high="{{ scan.stats.HIGH }}"
                         data-medium="{{ scan.stats.MEDIUM }}"
                         data-low="{{ scan.stats.LOW }}"
                         data-unknown="{{ scan.stats.UNKNOWN }}"
                         data-total-vulns="{{ scan.total_vulnerabilities }}">
                        <div class="card-header">
                            <div class="namespace-name">
                                <i class="fas fa-cube"></i>
                                {{ scan.namespace }}
                            </div>
                            <div class="status-badge status-{{ scan.metadata.get('status', 'unknown') }}">
                                {% if scan.is_scanning %}
                                    <div class="scanning-indicator">
                                        <div class="spinner"></div>
                                        Scanning
                                    </div>
                                {% else %}
                                    {{ scan.metadata.get('status', 'Unknown').title() }}
                                {% endif %}
                            </div>
                        </div>

                        {% if scan.total_vulnerabilities > 0 %}
                        <div class="vuln-stats">
                            <div class="vuln-stat critical" title="Critical Vulnerabilities">
                                <div>{{ scan.stats.CRITICAL }}</div>
                                <small>CRIT</small>
                            </div>
                            <div class="vuln-stat high" title="High Vulnerabilities">
                                <div>{{ scan.stats.HIGH }}</div>
                                <small>HIGH</small>
                            </div>
                            <div class="vuln-stat medium" title="Medium Vulnerabilities">
                                <div>{{ scan.stats.MEDIUM }}</div>
                                <small>MED</small>
                            </div>
                            <div class="vuln-stat low" title="Low Vulnerabilities">
                                <div>{{ scan.stats.LOW }}</div>
                                <small>LOW</small>
                            </div>
                            <div class="vuln-stat unknown" title="Unknown Vulnerabilities">
                                <div>{{ scan.stats.UNKNOWN }}</div>
                                <small>UNK</small>
                            </div>
                        </div>
                        {% endif %}

                        <div class="metadata-info">
                            {% if scan.metadata.get('start_time') %}
                                <i class="fas fa-clock"></i> 
                                Scanned: {{ scan.metadata.start_time[:19].replace('T', ' ') }}
                            {% endif %}
                            {% if scan.metadata.get('total_images') %}
                                | <i class="fas fa-images"></i> 
                                Images: {{ scan.metadata.get('scanned_images', 0) }}/{{ scan.metadata.total_images }}
                            {% endif %}
                            {% if scan.total_vulnerabilities > 0 %}
                                | <i class="fas fa-bug"></i> 
                                Total Vulnerabilities: {{ scan.total_vulnerabilities }}
                            {% endif %}
                        </div>

                        <div class="results-summary">
                            <div class="results-summary-text">
                                {% if scan.stats.CRITICAL > 0 %}
                                    <span style="color: #dc3545;"><strong>{{ scan.stats.CRITICAL }} Critical</strong></span>
                                {% endif %}
                                {% if scan.stats.HIGH > 0 %}
                                    {% if scan.stats.CRITICAL > 0 %}, {% endif %}
                                    <span style="color: #fd7e14;"><strong>{{ scan.stats.HIGH }} High</strong></span>
                                {% endif %}
                                {% if scan.stats.MEDIUM > 0 %}
                                    {% if scan.stats.CRITICAL > 0 or scan.stats.HIGH > 0 %}, {% endif %}
                                    <span style="color: #ffc107;"><strong>{{ scan.stats.MEDIUM }} Medium</strong></span>
                                {% endif %}
                                {% if scan.total_vulnerabilities == 0 %}
                                    <span style="color: #28a745;"><i class="fas fa-shield-alt"></i> No vulnerabilities found!</span>
                                {% endif %}
                            </div>
                        </div>

                        <div class="card-actions">
                            {% if scan.is_scanning %}
                                <a href="/scan/{{ scan.namespace }}" class="btn-small btn-primary">
                                    <i class="fas fa-eye"></i> Watch Scan
                                </a>
                            {% else %}
                                <a href="/results/{{ scan.namespace }}" class="btn-small btn-success">
                                    <i class="fas fa-chart-bar"></i> View Results
                                </a>
                                <a href="/scan/{{ scan.namespace }}" class="btn-small">
                                    <i class="fas fa-redo"></i> Rescan
                                </a>
                            {% endif %}
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
            {% else %}
            <div class="history">
                <div class="history-header">
                    <h2><i class="fas fa-history"></i> Scan History</h2>
                    <p>View and manage your security scans</p>
                </div>
                <div class="empty-state">
                    <i class="fas fa-search"></i>
                    <h3>No scans yet</h3>
                    <p>Start by entering a Kubernetes namespace above to begin your first security scan.</p>
                </div>
            </div>
            {% endif %}
        </div>

        <script>
            // Show filters if there are scan results
            const scanHistory = {{ scan_history | tojson if scan_history else '[]' }};
            if (scanHistory && scanHistory.length > 0) {
                document.getElementById('filtersSection').classList.add('show');
            }

            let currentFilters = {
                namespace: '',
                severity: '',
                status: '',
                minVulns: ''
            };

            function applyFilters() {
                const namespaceFilter = document.getElementById('namespaceFilter').value.toLowerCase().trim();
                const severityFilter = document.getElementById('severityFilter').value;
                const statusFilter = document.getElementById('statusFilter').value;
                const minVulnsFilter = document.getElementById('minVulnsFilter').value;

                currentFilters = {
                    namespace: namespaceFilter,
                    severity: severityFilter,
                    status: statusFilter,
                    minVulns: minVulnsFilter
                };

                const cards = document.querySelectorAll('.history-card');
                let visibleCount = 0;

                cards.forEach(card => {
                    const namespace = card.querySelector('.namespace-name').textContent.toLowerCase().trim();
                    const status = card.dataset.status;
                    const totalVulns = parseInt(card.dataset.totalVulns) || 0;
                    
                    const critical = parseInt(card.dataset.critical) || 0;
                    const high = parseInt(card.dataset.high) || 0;
                    const medium = parseInt(card.dataset.medium) || 0;
                    const low = parseInt(card.dataset.low) || 0;
                    const unknown = parseInt(card.dataset.unknown) || 0;

                    let shouldShow = true;

                    if (namespaceFilter && !namespace.includes(namespaceFilter)) {
                        shouldShow = false;
                    }

                    if (statusFilter && status !== statusFilter) {
                        shouldShow = false;
                    }

                    if (minVulnsFilter && totalVulns < parseInt(minVulnsFilter)) {
                        shouldShow = false;
                    }

                    if (severityFilter) {
                        let hasRequiredSeverity = false;
                        switch (severityFilter) {
                            case 'CRITICAL': hasRequiredSeverity = critical > 0; break;
                            case 'HIGH': hasRequiredSeverity = high > 0; break;
                            case 'MEDIUM': hasRequiredSeverity = medium > 0; break;
                            case 'LOW': hasRequiredSeverity = low > 0; break;
                            case 'UNKNOWN': hasRequiredSeverity = unknown > 0; break;
                        }
                        if (!hasRequiredSeverity) {
                            shouldShow = false;
                        }
                    }

                    if (shouldShow) {
                        card.classList.remove('hidden');
                        visibleCount++;
                    } else {
                        card.classList.add('hidden');
                    }
                });

                updateActiveFilters();
                console.log(`Filters applied. Showing ${visibleCount} of ${cards.length} scans.`);
            }

            function clearFilters() {
                document.getElementById('namespaceFilter').value = '';
                document.getElementById('severityFilter').value = '';
                document.getElementById('statusFilter').value = '';
                document.getElementById('minVulnsFilter').value = '';
                
                currentFilters = { namespace: '', severity: '', status: '', minVulns: '' };

                const cards = document.querySelectorAll('.history-card');
                cards.forEach(card => card.classList.remove('hidden'));

                updateActiveFilters();
                console.log('All filters cleared');
            }

            function updateActiveFilters() {
                const activeFiltersContainer = document.getElementById('activeFilters');
                activeFiltersContainer.innerHTML = '';

                Object.keys(currentFilters).forEach(key => {
                    const value = currentFilters[key];
                    if (value) {
                        const tag = document.createElement('div');
                        tag.className = 'filter-tag';
                        tag.innerHTML = `
                            <span>${key}: ${value}</span>
                            <span class="remove" onclick="removeFilter('${key}')">&times;</span>
                        `;
                        activeFiltersContainer.appendChild(tag);
                    }
                });
            }

            function removeFilter(filterKey) {
                switch (filterKey) {
                    case 'namespace': document.getElementById('namespaceFilter').value = ''; break;
                    case 'severity': document.getElementById('severityFilter').value = ''; break;
                    case 'status': document.getElementById('statusFilter').value = ''; break;
                    case 'minVulns': document.getElementById('minVulnsFilter').value = ''; break;
                }
                applyFilters();
            }

            document.getElementById('namespaceFilter').addEventListener('input', applyFilters);
            document.getElementById('severityFilter').addEventListener('change', applyFilters);
            document.getElementById('statusFilter').addEventListener('change', applyFilters);
            document.getElementById('minVulnsFilter').addEventListener('input', applyFilters);

            setTimeout(() => {
                const hasActiveScans = document.querySelector('.status-scanning');
                if (hasActiveScans) { location.reload(); }
            }, 30000);

            console.log('Trivy Scanner interface loaded with enhanced filtering');
        </script>
    </body>
    </html>
    '''

    SCAN_HTML = '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Scanning {{ namespace }} - Trivy Scanner</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh; color: #333;
            }
            .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
            .header {
                background: white; border-radius: 15px; padding: 25px; margin-bottom: 25px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2); display: flex;
                justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 20px;
            }
            .header-left { display: flex; align-items: center; gap: 15px; }
            .namespace-icon {
                width: 60px; height: 60px; background: linear-gradient(45deg, #667eea, #764ba2);
                border-radius: 12px; display: flex; align-items: center; justify-content: center;
                color: white; font-size: 1.5rem;
            }
            .header-info h1 { font-size: 1.8rem; margin-bottom: 5px; color: #333; }
            .header-info p { color: #666; font-size: 1rem; }
            .header-right { display: flex; gap: 10px; }
            .btn {
                padding: 12px 20px; border: none; border-radius: 8px; font-size: 1rem;
                cursor: pointer; text-decoration: none; display: inline-flex;
                align-items: center; gap: 8px; transition: all 0.3s ease; font-weight: 500;
            }
            .btn-primary { background: #007bff; color: white; }
            .btn-secondary { background: #6c757d; color: white; }
            .btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); }
            .progress-section {
                background: white; border-radius: 15px; padding: 25px; margin-bottom: 25px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            }
            .progress-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
            .progress-header h2 { display: flex; align-items: center; gap: 10px; }
            .status-badge { padding: 8px 16px; border-radius: 20px; font-size: 0.9rem; font-weight: 600; text-transform: uppercase; }
            .status-scanning {
                background: #fff3cd; color: #856404; display: flex; align-items: center; gap: 8px;
            }
            .status-completed { background: #d4edda; color: #155724; }
            .spinner {
                width: 16px; height: 16px; border: 2px solid #f3f3f3; border-top: 2px solid #856404;
                border-radius: 50%; animation: spin 1s linear infinite;
            }
            @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
            .progress-bar-container { background: #f8f9fa; border-radius: 10px; height: 20px; overflow: hidden; margin-bottom: 15px; }
            .progress-bar {
                height: 100%; background: linear-gradient(45deg, #28a745, #20c997); border-radius: 10px;
                transition: width 0.5s ease; display: flex; align-items: center; justify-content: center;
                color: white; font-size: 0.8rem; font-weight: 600;
            }
            .progress-stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; }
            .stat-card { background: #f8f9fa; padding: 15px; border-radius: 10px; text-align: center; border: 1px solid #e9ecef; }
            .stat-value { font-size: 1.5rem; font-weight: 700; color: #333; }
            .stat-label { font-size: 0.9rem; color: #666; margin-top: 5px; }
            .log-section { background: #1a1a1a; border-radius: 15px; overflow: hidden; box-shadow: 0 10px 30px rgba(0,0,0,0.2); }
            .log-header { background: #333; color: white; padding: 20px; display: flex; justify-content: space-between; align-items: center; }
            .log-header h3 { display: flex; align-items: center; gap: 10px; }
            .log-controls { display: flex; gap: 10px; }
            .log-btn {
                background: #495057; color: white; border: none; padding: 8px 12px;
                border-radius: 6px; cursor: pointer; font-size: 0.85rem; transition: background 0.2s;
            }
            .log-btn:hover { background: #6c757d; }
            .log-container {
                height: 500px; overflow-y: auto; padding: 20px; background: #1a1a1a;
                color: #00ff00; font-family: 'Courier New', monospace; font-size: 0.9rem; line-height: 1.4;
            }
            .log-entry { margin-bottom: 8px; padding: 5px 10px; border-radius: 4px; display: flex; align-items: flex-start; gap: 10px; }
            .log-timestamp { color: #888; font-size: 0.8rem; white-space: nowrap; min-width: 80px; }
            .log-level {
                font-weight: bold; min-width: 60px; text-align: center; padding: 2px 6px;
                border-radius: 3px; font-size: 0.75rem;
            }
            .log-INFO { background: #17a2b8; color: white; }
            .log-SUCCESS { background: #28a745; color: white; }
            .log-WARNING { background: #ffc107; color: #212529; }
            .log-ERROR { background: #dc3545; color: white; }
            .log-message { flex: 1; word-break: break-word; }
            .completion-banner {
                background: linear-gradient(45deg, #28a745, #20c997); color: white;
                padding: 20px; border-radius: 10px; margin-bottom: 20px; text-align: center; display: none;
            }
            .completion-banner.show { display: block; animation: slideIn 0.5s ease; }
            @keyframes slideIn { from { transform: translateY(-20px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
            @media (max-width: 768px) {
                .container { padding: 10px; }
                .header { flex-direction: column; text-align: center; }
                .progress-stats { grid-template-columns: repeat(2, 1fr); }
                .log-container { height: 400px; font-size: 0.8rem; }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="header-left">
                    <div class="namespace-icon"><i class="fas fa-cube"></i></div>
                    <div class="header-info">
                        <h1>{{ namespace }}</h1>
                        <p>Security Vulnerability Scan</p>
                    </div>
                </div>
                <div class="header-right">
                    <a href="/results/{{ namespace }}" class="btn btn-primary">
                        <i class="fas fa-chart-bar"></i> View Results
                    </a>
                    <a href="/" class="btn btn-secondary">
                        <i class="fas fa-home"></i> Home
                    </a>
                </div>
            </div>

            <div class="completion-banner" id="completionBanner">
                <h3><i class="fas fa-check-circle"></i> Scan Completed Successfully!</h3>
                <p>Click "View Results" to see the vulnerability report</p>
            </div>

            <div class="progress-section">
                <div class="progress-header">
                    <h2><i class="fas fa-tasks"></i> Scan Progress</h2>
                    <div class="status-badge" id="statusBadge">
                        {% if scanning %}
                            <div class="status-scanning">
                                <div class="spinner"></div>
                                Scanning
                            </div>
                        {% else %}
                            <div class="status-completed">Completed</div>
                        {% endif %}
                    </div>
                </div>

                <div class="progress-bar-container">
                    <div class="progress-bar" id="progressBar" style="width: 0%">0%</div>
                </div>

                <div class="progress-stats">
                    <div class="stat-card">
                        <div class="stat-value" id="totalImages">{{ metadata.get('total_images', 0) }}</div>
                        <div class="stat-label">Total Images</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="scannedImages">{{ metadata.get('scanned_images', 0) }}</div>
                        <div class="stat-label">Scanned</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="failedImages">{{ metadata.get('failed_images', 0) }}</div>
                        <div class="stat-label">Failed</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="logCount">0</div>
                        <div class="stat-label">Log Entries</div>
                    </div>
                </div>
            </div>

            <div class="log-section">
                <div class="log-header">
                    <h3><i class="fas fa-terminal"></i> Scan Logs</h3>
                    <div class="log-controls">
                        <button class="log-btn" id="autoScrollBtn" onclick="toggleAutoScroll()">
                            <i class="fas fa-arrow-down"></i> Auto Scroll: ON
                        </button>
                        <button class="log-btn" onclick="clearLogs()">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                    </div>
                </div>
                <div class="log-container" id="logContainer">
                    <div class="log-entry">
                        <span class="log-timestamp">--:--:--</span>
                        <span class="log-level log-INFO">INFO</span>
                        <span class="log-message">Initializing scan for namespace: {{ namespace }}</span>
                    </div>
                </div>
            </div>
        </div>

        <script>
            let autoScroll = true;
            let logCount = 0;
            let isScanning = {{ 'true' if scanning else 'false' }};

            const logContainer = document.getElementById('logContainer');
            const autoScrollBtn = document.getElementById('autoScrollBtn');
            const statusBadge = document.getElementById('statusBadge');
            const progressBar = document.getElementById('progressBar');
            const completionBanner = document.getElementById('completionBanner');

            const source = new EventSource('/logs/{{ namespace }}');

            source.onmessage = function(event) {
                try {
                    const logData = JSON.parse(event.data);
                    
                    if (logData.type === 'complete') {
                        handleScanComplete();
                        return;
                    }

                    addLogEntry(logData);
                    updateStats();
                    
                } catch (e) {
                    addLegacyLogEntry(event.data);
                }
            };

            source.onerror = function() {
                if (isScanning) {
                    setTimeout(() => location.reload(), 5000);
                }
            };

            function addLogEntry(logData) {
                const timestamp = new Date(logData.timestamp).toLocaleTimeString();
                const level = logData.level || 'INFO';
                const message = logData.message || '';

                const logEntry = document.createElement('div');
                logEntry.className = 'log-entry';
                logEntry.innerHTML = `
                    <span class="log-timestamp">${timestamp}</span>
                    <span class="log-level log-${level}">${level}</span>
                    <span class="log-message">${message}</span>
                `;

                logContainer.appendChild(logEntry);
                logCount++;

                if (autoScroll) {
                    logContainer.scrollTop = logContainer.scrollHeight;
                }
            }

            function addLegacyLogEntry(message) {
                const logEntry = document.createElement('div');
                logEntry.className = 'log-entry';
                logEntry.innerHTML = `
                    <span class="log-timestamp">${new Date().toLocaleTimeString()}</span>
                    <span class="log-level log-INFO">INFO</span>
                    <span class="log-message">${message}</span>
                `;

                logContainer.appendChild(logEntry);
                logCount++;

                if (autoScroll) {
                    logContainer.scrollTop = logContainer.scrollHeight;
                }
            }

            function updateStats() {
                fetch(`/api/scan-status/{{ namespace }}`)
                    .then(response => response.json())
                    .then(data => {
                        const metadata = data.metadata || {};
                        const totalImages = metadata.total_images || 0;
                        const scannedImages = metadata.scanned_images || 0;
                        const failedImages = metadata.failed_images || 0;

                        document.getElementById('totalImages').textContent = totalImages;
                        document.getElementById('scannedImages').textContent = scannedImages;
                        document.getElementById('failedImages').textContent = failedImages;
                        document.getElementById('logCount').textContent = logCount;

                        if (totalImages > 0) {
                            const progress = (scannedImages / totalImages) * 100;
                            progressBar.style.width = progress + '%';
                            progressBar.textContent = Math.round(progress) + '%';
                        }

                        isScanning = data.scanning;
                        if (!isScanning && metadata.status === 'completed') {
                            handleScanComplete();
                        }
                    })
                    .catch(console.error);
            }

            function handleScanComplete() {
                isScanning = false;
                source.close();
                
                statusBadge.innerHTML = '<div class="status-completed">Completed</div>';
                completionBanner.classList.add('show');
                
                setTimeout(() => {
                    window.location.href = '/results/{{ namespace }}';
                }, 3000);
            }

            function toggleAutoScroll() {
                autoScroll = !autoScroll;
                autoScrollBtn.innerHTML = autoScroll 
                    ? '<i class="fas fa-arrow-down"></i> Auto Scroll: ON'
                    : '<i class="fas fa-pause"></i> Auto Scroll: OFF';
            }

            function clearLogs() {
                logContainer.innerHTML = '';
                logCount = 0;
                document.getElementById('logCount').textContent = '0';
            }

            setInterval(updateStats, 2000);
            updateStats();
        </script>
    </body>
    </html>
    '''

    RESULTS_HTML = ''' <!DOCTYPE html> <html> <head>
        <title>Results - {{ namespace }} - Trivy Scanner</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh; color: #333;
            }
            .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
            .header {
                background: white; border-radius: 15px; padding: 25px; margin-bottom: 25px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2); display: flex;
                justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 20px;
            }
            .header-left { display: flex; align-items: center; gap: 15px; }
            .namespace-icon {
                width: 60px; height: 60px; background: linear-gradient(45deg, #667eea, #764ba2);
                border-radius: 12px; display: flex; align-items: center; justify-content: center;
                color: white; font-size: 1.5rem;
            }
            .header-info h1 { font-size: 1.8rem; margin-bottom: 5px; color: #333; }
            .header-info p { color: #666; font-size: 1rem; }
            .header-right { display: flex; gap: 10px; flex-wrap: wrap; }
            .btn {
                padding: 12px 20px; border: none; border-radius: 8px; font-size: 1rem;
                cursor: pointer; text-decoration: none; display: inline-flex;
                align-items: center; gap: 8px; transition: all 0.3s ease; font-weight: 500;
            }
            .btn-primary { background: #007bff; color: white; }
            .btn-secondary { background: #6c757d; color: white; }
            .btn-warning { background: #ffc107; color: #212529; }
            .btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); }

            /* Enhanced Filters Section */
            .filters-section {
                background: white; border-radius: 15px; padding: 25px; margin-bottom: 25px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            }
            .filters-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
            .filters-header h3 { color: #333; font-size: 1.5rem; display: flex; align-items: center; gap: 10px; }
            .filter-toggle { 
                background: #667eea; color: white; border: none; padding: 8px 16px; 
                border-radius: 6px; cursor: pointer; font-size: 0.9rem;
            }
            .filter-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px; }
            .filter-group { display: flex; flex-direction: column; gap: 8px; }
            .filter-label { font-weight: 600; color: #555; font-size: 0.9rem; text-transform: uppercase; }
            .filter-input, .filter-select {
                padding: 10px 12px; border: 2px solid #e0e0e0; border-radius: 8px;
                font-size: 0.95rem; transition: all 0.3s ease; background: white;
            }
            .filter-input:focus, .filter-select:focus {
                outline: none; border-color: #667eea; box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }
            .filter-actions { display: flex; gap: 10px; justify-content: flex-end; flex-wrap: wrap; }
            .filter-btn {
                padding: 8px 16px; border: none; border-radius: 6px; cursor: pointer; 
                font-size: 0.9rem; font-weight: 500; transition: all 0.3s ease;
                display: flex; align-items: center; gap: 8px;
            }
            .filter-btn-primary { background: #667eea; color: white; }
            .filter-btn-secondary { background: #6c757d; color: white; }
            .filter-btn:hover { transform: translateY(-1px); box-shadow: 0 3px 10px rgba(0,0,0,0.2); }
            .active-filters { display: flex; gap: 8px; flex-wrap: wrap; margin-top: 15px; }
            .filter-tag {
                background: #e9ecef; padding: 4px 10px; border-radius: 16px; font-size: 0.8rem;
                display: flex; align-items: center; gap: 5px; color: #495057;
            }
            .filter-tag .remove { cursor: pointer; color: #dc3545; font-weight: bold; margin-left: 5px; }
            .filter-tag .remove:hover { color: #c82333; }
            .results-summary {
                background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 20px;
                display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 15px;
            }
            .summary-text { font-weight: 500; color: #495057; }
            .summary-count { background: #667eea; color: white; padding: 4px 12px; border-radius: 12px; font-size: 0.9rem; }

            .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 30px; }
            .stat-card {
                background: white; padding: 25px; border-radius: 12px;
                box-shadow: 0 5px 20px rgba(0,0,0,0.1); text-align: center; transition: transform 0.3s ease;
            }
            .stat-card:hover { transform: translateY(-5px); }
            .stat-icon {
                width: 50px; height: 50px; border-radius: 50%; display: flex;
                align-items: center; justify-content: center; margin: 0 auto 15px;
                font-size: 1.2rem; color: white;
            }
            .stat-critical .stat-icon { background: #dc3545; }
            .stat-high .stat-icon { background: #fd7e14; }
            .stat-medium .stat-icon { background: #ffc107; }
            .stat-low .stat-icon { background: #28a745; }
            .stat-total .stat-icon { background: #6f42c1; }
            .stat-value { font-size: 2rem; font-weight: 700; margin-bottom: 5px; }
            .stat-label { color: #666; font-size: 0.95rem; text-transform: uppercase; font-weight: 600; }
            .results-section { display: grid; gap: 25px; }
            .image-card {
                background: white; border-radius: 12px; box-shadow: 0 5px 20px rgba(0,0,0,0.1);
                overflow: hidden; transition: transform 0.3s ease;
            }
            .image-card:hover { transform: translateY(-2px); }
            .image-card.hidden { display: none; }
            .image-header {
                background: linear-gradient(45deg, #667eea, #764ba2); color: white;
                padding: 20px; display: flex; justify-content: space-between;
                align-items: center; flex-wrap: wrap; gap: 15px;
            }
            .image-info h3 { font-size: 1.2rem; margin-bottom: 5px; word-break: break-all; }
            .image-info p { opacity: 0.9; font-size: 0.9rem; }
            .image-stats { display: flex; gap: 15px; }
            .image-stat {
                text-align: center; padding: 8px 12px; background: rgba(255,255,255,0.2);
                border-radius: 8px;
            }
            .image-stat-value { font-size: 1.1rem; font-weight: 700; }
            .image-stat-label { font-size: 0.7rem; text-transform: uppercase; }
            .vulnerabilities-table { overflow-x: auto; }
            .vuln-table { width: 100%; border-collapse: collapse; }
            .vuln-table th {
                background: #f8f9fa; padding: 15px; text-align: left; font-weight: 600;
                border-bottom: 2px solid #dee2e6; position: sticky; top: 0; z-index: 10;
            }
            .vuln-table td { padding: 12px 15px; border-bottom: 1px solid #dee2e6; vertical-align: top; }
            .vuln-table tr:hover { background: #f8f9fa; }
            .vuln-table tr.hidden { display: none; }
            .severity-badge {
                padding: 4px 8px; border-radius: 12px; font-size: 0.75rem;
                font-weight: 600; text-transform: uppercase; white-space: nowrap;
            }
            .severity-CRITICAL { background: #dc3545; color: white; }
            .severity-HIGH { background: #fd7e14; color: white; }
            .severity-MEDIUM { background: #ffc107; color: #212529; }
            .severity-LOW { background: #28a745; color: white; }
            .severity-UNKNOWN { background: #6c757d; color: white; }
            .vuln-id {
                font-family: monospace; background: #f8f9fa; padding: 2px 6px;
                border-radius: 4px; font-size: 0.85rem;
            }
            .package-info { font-family: monospace; font-size: 0.9rem; }
            .version-badge {
                background: #e9ecef; padding: 2px 6px; border-radius: 4px;
                font-size: 0.8rem; margin: 2px; display: inline-block;
            }
            .fixed-version { background: #d1ecf1; color: #0c5460; }
            .vuln-title { font-weight: 500; line-height: 1.3; }
            .no-results {
                background: white; border-radius: 12px; padding: 60px 40px;
                text-align: center; box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            }
            .no-results i { font-size: 4rem; color: #28a745; margin-bottom: 20px; }
            .no-results h3 { font-size: 1.5rem; margin-bottom: 10px; color: #333; }
            .no-results p { color: #666; font-size: 1.1rem; }
            .expand-btn {
                background: none; border: none; color: #007bff; cursor: pointer;
                font-size: 0.8rem; padding: 2px 5px;
            }
            .expand-btn:hover { text-decoration: underline; }
            .description-full {
                display: none; margin-top: 8px; font-size: 0.85rem;
                color: #666; line-height: 1.4;
            }
            .description-full.show { display: block; }
            @media (max-width: 768px) {
                .container { padding: 10px; }
                .header { flex-direction: column; text-align: center; }
                .filter-grid { grid-template-columns: 1fr; }
                .filter-actions { flex-direction: column; }
                .stats-grid { grid-template-columns: repeat(2, 1fr); }
                .image-header { flex-direction: column; text-align: center; }
                .image-stats { justify-content: center; }
                .vuln-table { font-size: 0.85rem; }
                .vuln-table th, .vuln-table td { padding: 8px; }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="header-left">
                    <div class="namespace-icon"><i class="fas fa-cube"></i></div>
                    <div class="header-info">
                        <h1>{{ namespace }}</h1>
                        <p>Security Scan Results</p>
                    </div>
                </div>
                <div class="header-right">
                    <button onclick="exportResults()" class="btn btn-warning">
                        <i class="fas fa-download"></i> Export JSON
                    </button>
                    <a href="/scan/{{ namespace }}" class="btn btn-primary">
                        <i class="fas fa-redo"></i> Rescan
                    </a>
                    <a href="/" class="btn btn-secondary">
                        <i class="fas fa-home"></i> Home
                    </a>
                </div>
            </div>

            <!-- Enhanced Filters Section -->
            <div class="filters-section">
                <div class="filters-header">
                    <h3><i class="fas fa-filter"></i> Vulnerability Filters</h3>
                    <button class="filter-toggle" onclick="toggleFilters()">
                        <i class="fas fa-chevron-down" id="filterToggleIcon"></i> Show/Hide
                    </button>
                </div>
                <div class="filter-content" id="filterContent">
                    <div class="filter-grid">
                        <div class="filter-group">
                            <label class="filter-label">Severity Level</label>
                            <select id="severityFilter" class="filter-select">
                                <option value="">All Severities</option>
                                <option value="CRITICAL">Critical</option>
                                <option value="HIGH">High</option>
                                <option value="MEDIUM">Medium</option>
                                <option value="LOW">Low</option>
                                <option value="UNKNOWN">Unknown</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">Package Name</label>
                            <input type="text" id="packageFilter" class="filter-input" placeholder="Filter by package...">
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">Vulnerability ID</label>
                            <input type="text" id="vulnIdFilter" class="filter-input" placeholder="CVE-2023-xxxx">
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">Image Name</label>
                            <input type="text" id="imageFilter" class="filter-input" placeholder="Filter by image...">
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">Fix Available</label>
                            <select id="fixFilter" class="filter-select">
                                <option value="">All</option>
                                <option value="yes">Has Fix</option>
                                <option value="no">No Fix</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">CVSS Score</label>
                            <input type="number" id="cvssFilter" class="filter-input" placeholder="Min CVSS score..." min="0" max="10" step="0.1">
                        </div>
                    </div>
                    <div class="filter-actions">
                        <button onclick="clearAllFilters()" class="filter-btn filter-btn-secondary">
                            <i class="fas fa-times"></i> Clear All
                        </button>
                        <button onclick="applyFilters()" class="filter-btn filter-btn-primary">
                            <i class="fas fa-search"></i> Apply Filters
                        </button>
                    </div>
                    <div class="active-filters" id="activeFilters"></div>
                    <div class="results-summary" id="resultsSummary">
                        <span class="summary-text">Showing all vulnerabilities</span>
                        <span class="summary-count" id="summaryCount">{{ total_vulnerabilities }} total</span>
                    </div>
                </div>
            </div>

            <div class="stats-grid">
                <div class="stat-card stat-total">
                    <div class="stat-icon"><i class="fas fa-bug"></i></div>
                    <div class="stat-value" id="totalVulnCount">{{ total_vulnerabilities }}</div>
                    <div class="stat-label">Total Vulnerabilities</div>
                </div>
                <div class="stat-card stat-critical">
                    <div class="stat-icon"><i class="fas fa-exclamation-triangle"></i></div>
                    <div class="stat-value" id="criticalCount">{{ stats.CRITICAL }}</div>
                    <div class="stat-label">Critical</div>
                </div>
                <div class="stat-card stat-high">
                    <div class="stat-icon"><i class="fas fa-exclamation"></i></div>
                    <div class="stat-value" id="highCount">{{ stats.HIGH }}</div>
                    <div class="stat-label">High</div>
                </div>
                <div class="stat-card stat-medium">
                    <div class="stat-icon"><i class="fas fa-minus-circle"></i></div>
                    <div class="stat-value" id="mediumCount">{{ stats.MEDIUM }}</div>
                    <div class="stat-label">Medium</div>
                </div>
                <div class="stat-card stat-low">
                    <div class="stat-icon"><i class="fas fa-info-circle"></i></div>
                    <div class="stat-value" id="lowCount">{{ stats.LOW }}</div>
                    <div class="stat-label">Low</div>
                </div>
            </div>

            {% if results %}
            <div class="results-section" id="resultsSection">
                {% for result in results %}
                <div class="image-card" data-image="{{ result.image }}">
                    <div class="image-header">
                        <div class="image-info">
                            <h3>{{ result.image }}</h3>
                            <p><i class="fas fa-clock"></i> Scanned: {{ result.scan_time[:19].replace('T', ' ') }}</p>
                        </div>
                        <div class="image-stats">
                            {% set image_stats = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0} %}
                            {% for vuln in result.vulnerabilities %}
                                {% set _ = image_stats.update({vuln.severity: image_stats.get(vuln.severity, 0) + 1}) %}
                            {% endfor %}
                            
                            <div class="image-stat">
                                <div class="image-stat-value">{{ image_stats.CRITICAL }}</div>
                                <div class="image-stat-label">Critical</div>
                            </div>
                            <div class="image-stat">
                                <div class="image-stat-value">{{ image_stats.HIGH }}</div>
                                <div class="image-stat-label">High</div>
                            </div>
                            <div class="image-stat">
                                <div class="image-stat-value">{{ image_stats.MEDIUM }}</div>
                                <div class="image-stat-label">Medium</div>
                            </div>
                            <div class="image-stat">
                                <div class="image-stat-value">{{ image_stats.LOW }}</div>
                                <div class="image-stat-label">Low</div>
                            </div>
                        </div>
                    </div>

                    {% if result.vulnerabilities %}
                    <div class="vulnerabilities-table">
                        <table class="vuln-table">
                            <thead>
                                <tr>
                                    <th>Vulnerability ID</th>
                                    <th>Severity</th>
                                    <th>Package</th>
                                    <th>Installed Version</th>
                                    <th>Fixed Version</th>
                                    <th>CVSS Score</th>
                                    <th>Title</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for vuln in result.vulnerabilities %}
                                <tr class="vuln-row" 
                                    data-severity="{{ vuln.severity }}" 
                                    data-package="{{ vuln.pkg }}" 
                                    data-vuln-id="{{ vuln.id }}"
                                    data-image="{{ result.image }}"
                                    data-has-fix="{{ 'yes' if vuln.fixed else 'no' }}"
                                    data-cvss="{{ vuln.cvss_score or 0 }}">
                                    <td><div class="vuln-id">{{ vuln.id }}</div></td>
                                    <td><span class="severity-badge severity-{{ vuln.severity }}">{{ vuln.severity }}</span></td>
                                    <td>
                                        <div class="package-info">{{ vuln.pkg }}</div>
                                        {% if vuln.target %}
                                        <small style="color: #666;">{{ vuln.target }}</small>
                                        {% endif %}
                                    </td>
                                    <td><span class="version-badge">{{ vuln.installed or 'N/A' }}</span></td>
                                    <td>
                                        {% if vuln.fixed %}
                                        <span class="version-badge fixed-version">{{ vuln.fixed }}</span>
                                        {% else %}
                                        <span style="color: #dc3545; font-size: 0.8rem;">Not Fixed</span>
                                        {% endif %}
                                    </td>
                                    <td>
                                        {% if vuln.cvss_score %}
                                        <div style="display: inline-flex; align-items: center; gap: 5px; font-size: 0.8rem; color: #666;">
                                            <i class="fas fa-chart-line"></i>
                                            {{ "%.1f"|format(vuln.cvss_score) }}
                                        </div>
                                        {% else %}
                                        <span style="color: #666;">N/A</span>
                                        {% endif %}
                                    </td>
                                    <td>
                                        <div class="vuln-title">{{ vuln.title or 'No title available' }}</div>
                                        {% if vuln.description %}
                                        <button class="expand-btn" onclick="toggleDescription(this)">Show Description</button>
                                        <div class="description-full">{{ vuln.description }}</div>
                                        {% endif %}
                                    </td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    {% else %}
                    <div style="padding: 20px; text-align: center; color: #28a745;">
                        <i class="fas fa-shield-alt" style="font-size: 2rem; margin-bottom: 10px;"></i>
                        <p>✅ No vulnerabilities found in this image!</p>
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
            </div>
            {% else %}
            <div class="no-results">
                <i class="fas fa-shield-alt"></i>
                <h3>No Vulnerabilities Found!</h3>
                <p>Great news! No security vulnerabilities were detected in the scanned images for namespace <strong>{{ namespace }}</strong>.</p>
            </div>
            {% endif %}

            {% if results %}
            <div style="margin-top: 20px; text-align: center;">
                <p style="color: white; opacity: 0.8;">
                    <i class="fas fa-info-circle"></i>
                    Showing results for {{ results|length }} image(s) with <span id="visibleVulnCount">{{ total_vulnerabilities }}</span> vulnerabilities
                </p>
            </div>
            {% endif %}
        </div>

        <script>
            let currentFilters = { severity: '', package: '', vulnId: '', image: '', fix: '', cvss: '' };
            let filterExpanded = true;

            function toggleFilters() {
                const content = document.getElementById('filterContent');
                const icon = document.getElementById('filterToggleIcon');
                
                filterExpanded = !filterExpanded;
                content.style.display = filterExpanded ? 'block' : 'none';
                icon.className = filterExpanded ? 'fas fa-chevron-up' : 'fas fa-chevron-down';
            }

            function applyFilters() {
                currentFilters = {
                    severity: document.getElementById('severityFilter').value,
                    package: document.getElementById('packageFilter').value.toLowerCase().trim(),
                    vulnId: document.getElementById('vulnIdFilter').value.toLowerCase().trim(),
                    image: document.getElementById('imageFilter').value.toLowerCase().trim(),
                    fix: document.getElementById('fixFilter').value,
                    cvss: document.getElementById('cvssFilter').value
                };

                let visibleVulns = 0;
                let stats = { CRITICAL: 0, HIGH: 0, MEDIUM: 0, LOW: 0, UNKNOWN: 0 };
                
                const vulnRows = document.querySelectorAll('.vuln-row');
                vulnRows.forEach(row => {
                    let shouldShow = true;

                    if (currentFilters.severity && row.dataset.severity !== currentFilters.severity) shouldShow = false;
                    if (currentFilters.package && !row.dataset.package.toLowerCase().includes(currentFilters.package)) shouldShow = false;
                    if (currentFilters.vulnId && !row.dataset.vulnId.toLowerCase().includes(currentFilters.vulnId)) shouldShow = false;
                    if (currentFilters.image && !row.dataset.image.toLowerCase().includes(currentFilters.image)) shouldShow = false;
                    if (currentFilters.fix && row.dataset.hasFix !== currentFilters.fix) shouldShow = false;

                    if (currentFilters.cvss) {
                        const cvssScore = parseFloat(row.dataset.cvss) || 0;
                        if (cvssScore < parseFloat(currentFilters.cvss)) shouldShow = false;
                    }

                    if (shouldShow) {
                        row.classList.remove('hidden');
                        visibleVulns++;
                        stats[row.dataset.severity] = (stats[row.dataset.severity] || 0) + 1;
                    } else {
                        row.classList.add('hidden');
                    }
                });

                const imageCards = document.querySelectorAll('.image-card');
                imageCards.forEach(card => {
                    const visibleRows = card.querySelectorAll('.vuln-row:not(.hidden)');
                    if (visibleRows.length === 0 && card.querySelector('.vuln-row')) {
                        card.classList.add('hidden');
                    } else {
                        card.classList.remove('hidden');
                    }
                });

                updateStatCounts(stats, visibleVulns);
                updateActiveFilters();
                updateResultsSummary(visibleVulns);
            }

            function clearAllFilters() {
                document.getElementById('severityFilter').value = '';
                document.getElementById('packageFilter').value = '';
                document.getElementById('vulnIdFilter').value = '';
                document.getElementById('imageFilter').value = '';
                document.getElementById('fixFilter').value = '';
                document.getElementById('cvssFilter').value = '';
                
                currentFilters = { severity: '', package: '', vulnId: '', image: '', fix: '', cvss: '' };

                document.querySelectorAll('.vuln-row').forEach(row => row.classList.remove('hidden'));
                document.querySelectorAll('.image-card').forEach(card => card.classList.remove('hidden'));

                const originalStats = { CRITICAL: {{ stats.CRITICAL }}, HIGH: {{ stats.HIGH }}, MEDIUM: {{ stats.MEDIUM }}, LOW: {{ stats.LOW }}, UNKNOWN: {{ stats.UNKNOWN or 0 }} };
                updateStatCounts(originalStats, {{ total_vulnerabilities }});
                updateActiveFilters();
                updateResultsSummary({{ total_vulnerabilities }});
            }

            function updateStatCounts(stats, totalVulns) {
                document.getElementById('totalVulnCount').textContent = totalVulns;
                document.getElementById('criticalCount').textContent = stats.CRITICAL || 0;
                document.getElementById('highCount').textContent = stats.HIGH || 0;
                document.getElementById('mediumCount').textContent = stats.MEDIUM || 0;
                document.getElementById('lowCount').textContent = stats.LOW || 0;
                document.getElementById('visibleVulnCount').textContent = totalVulns;
            }

            function updateActiveFilters() {
                const activeFiltersContainer = document.getElementById('activeFilters');
                activeFiltersContainer.innerHTML = '';

                Object.keys(currentFilters).forEach(key => {
                    const value = currentFilters[key];
                    if (value) {
                        const tag = document.createElement('div');
                        tag.className = 'filter-tag';
                        tag.innerHTML = `<span>${key}: ${value}</span><span class="remove" onclick="removeFilter('${key}')">&times;</span>`;
                        activeFiltersContainer.appendChild(tag);
                    }
                });
            }

            function updateResultsSummary(visibleCount) {
                const summaryText = document.querySelector('.summary-text');
                const summaryCount = document.getElementById('summaryCount');
                
                const totalCount = {{ total_vulnerabilities }};
                summaryText.textContent = visibleCount === totalCount ? 'Showing all vulnerabilities' : 'Showing filtered vulnerabilities';
                summaryCount.textContent = `${visibleCount} of ${totalCount}`;
            }

            function removeFilter(filterKey) {
                const filterMap = {
                    severity: 'severityFilter', package: 'packageFilter', vulnId: 'vulnIdFilter',
                    image: 'imageFilter', fix: 'fixFilter', cvss: 'cvssFilter'
                };
                document.getElementById(filterMap[filterKey]).value = '';
                applyFilters();
            }

            function toggleDescription(button) {
                const description = button.nextElementSibling;
                const isShowing = description.classList.contains('show');
                
                description.classList.toggle('show', !isShowing);
                button.textContent = isShowing ? 'Show Description' : 'Hide Description';
            }

            function exportResults() {
                fetch(`/api/results/{{ namespace }}`)
                    .then(response => response.json())
                    .then(data => {
                        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `trivy-scan-{{ namespace }}-${new Date().toISOString().split('T')[0]}.json`;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                    })
                    .catch(error => {
                        console.error('Export failed:', error);
                        alert('Failed to export results');
                    });
            }

            // Add event listeners for real-time filtering
            document.getElementById('severityFilter').addEventListener('change', applyFilters);
            document.getElementById('packageFilter').addEventListener('input', applyFilters);
            document.getElementById('vulnIdFilter').addEventListener('input', applyFilters);
            document.getElementById('imageFilter').addEventListener('input', applyFilters);
            document.getElementById('fixFilter').addEventListener('change', applyFilters);Add commentMore actions
            document.getElementById('cvssFilter').addEventListener('input', applyFilters);

            console.log('Enhanced Trivy Results interface loaded with advanced filtering capabilities');
        </script>
    </body> </html>
